<?xml version="1.0" encoding="UTF-8"?>
<model version="3.2.2">
 <documentation>/**
 * CommStackMgr Active Object which.  This AO handles all communications work.
 */</documentation>
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="MsgEvt" superclass="qpc::QEvt">
   <documentation>/**
 * \struct Event struct type for getting data from Eth driver to LWIPMgr.
 * MsgEvt types will use CommStackSignals for signal names.  These events are
 * responsible for getting data from Eth/Serial to CommStackMgr.
 */</documentation>
   <attribute name="msg_src" type="MsgSrc" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Where the msg came from so it can be routed back to the sender. */</documentation>
   </attribute>
   <attribute name="msg_len" type="uint16_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Length of the msg buffer. */</documentation>
   </attribute>
   <attribute name="msg[MAX_MSG_LEN]" type="char" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Buffer that holds the data of the msg. */</documentation>
   </attribute>
  </class>
 </package>
 <package name="AOs" stereotype="0x02">
  <class name="CommMgr" superclass="qpc::QActive">
   <documentation>/**
 * \brief CommMgr &quot;class&quot;
 */</documentation>
   <attribute name="dataBuf[DC3_MAX_MSG_LEN]" type="uint8_t*" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Local buffer to store incoming msgs */</documentation>
   </attribute>
   <attribute name="basicMsg" type="struct DC3BasicMsg" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Common struct for DC3BasicMsg.  This can be re-used in most cases since once the
 * request has been unwrapped, all the data from that struct has been stored locally */</documentation>
   </attribute>
   <attribute name="basicMsgOffset" type="uint16_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keeps track of how far into the dataBuf basicMsg was.  Sometimes, there are
 * additional payload msgs after the BasicMsg in the buffer and this variable allows
 * the next deserialization step to know where to find them */</documentation>
   </attribute>
   <attribute name="msgRoute" type="DC3MsgRoute" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keeps track of where the message came from */</documentation>
   </attribute>
   <attribute name="msgId" type="uint32_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keep track of the ID of the msg */</documentation>
   </attribute>
   <attribute name="msgReqProg" type="bool" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keep track of whether Prog responses were requested by the sender of the msg */</documentation>
   </attribute>
   <attribute name="cliEvtSrc" type="DC3MsgRoute" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keep track of the CLI_RECEIVED_SIG event source in order to send it back the
 * same comm channel */</documentation>
   </attribute>
   <attribute name="cliEvtDst" type="DC3MsgRoute" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keep track of the CLI_RECEIVED_SIG event destination.
 * TODO: This isn't currently used but hold on to it just in case. Figure out if
 * this is even needed.*/</documentation>
   </attribute>
   <attribute name="errorCode" type="DC3Error_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keep track of errors that may occur in the AO */</documentation>
   </attribute>
   <attribute name="msgPayloadName" type="DC3MsgName" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keep track of what the payload msg is supposed to be upon reception.  This is
 * necessary because basicMsg struct gets modified to send an Ack and this variable
 * will be used to extract the rest of the payload from the data buffer where it's 
 * still being stored. */</documentation>
   </attribute>
   <attribute name="payloadMsgUnion" type="DC3PayloadMsgUnion_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Union of all the possible payload msgs.  This gets populated by the recieved msg
 * processing and later reused to send Prog and Done msgs. */</documentation>
   </attribute>
   <attribute name="commMgrTimerEvt" type="QTimeEvt" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Timer for timing out the Busy state of CommMgr Ao. */</documentation>
   </attribute>
   <attribute name="commOpTimerEvt" type="QTimeEvt" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Timer for timing out the individual operations in CommMgr AO. */</documentation>
   </attribute>
   <statechart>
    <initial target="../1/1">
     <action>(void)e;        /* suppress the compiler warning about unused parameter */

QS_OBJ_DICTIONARY(&amp;l_CommMgr);
QS_FUN_DICTIONARY(&amp;QHsm_top);
QS_FUN_DICTIONARY(&amp;CommMgr_initial);
QS_FUN_DICTIONARY(&amp;CommMgr_Active);

QActive_subscribe((QActive *)me, SER_RECEIVED_SIG);
QActive_subscribe((QActive *)me, CLI_RECEIVED_SIG);

</action>
     <initial_glyph conn="1,2,4,3,9,5">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="Active">
     <documentation>/**
 * This state is a catch-all Active state.  If any signals need
 * to be handled that do not cause state transitions and are
 * common to the entire AO, they should be handled here.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
     <entry>/* Arm and disarm*/
QTimeEvt_postIn(
    &amp;me-&gt;commMgrTimerEvt,
    (QActive *)me,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_COMM_MSG_PROCESS )
);
QTimeEvt_disarm(&amp;me-&gt;commMgrTimerEvt);

QTimeEvt_postIn(
    &amp;me-&gt;commOpTimerEvt,
    (QActive *)me,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_COMM_MSG_PROCESS )
);
QTimeEvt_disarm(&amp;me-&gt;commOpTimerEvt);</entry>
     <tran trig="BOOT_RESET">
      <action>/* Perform Reset */
NVIC_SystemReset();</action>
      <tran_glyph conn="3,139,3,-1,16">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="Idle">
      <documentation>/**
 * @brief	Idle state that allows new messages to be received.
 * The Idle state allows for handling of new incoming msgs. Msgs in other states
 * will be either deferred or ignored.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
      <entry>/* Clear out all the variables on entry to Idle state.  By this point, any error
 * feedback should have already happened. */
me-&gt;errorCode       = ERR_NONE;
me-&gt;msgId           = 0;
me-&gt;cliEvtSrc       = _DC3_NoRoute;
me-&gt;cliEvtDst       = _DC3_NoRoute;
me-&gt;msgRoute        = _DC3_NoRoute;
me-&gt;msgPayloadName  = _DC3NoMsg;
me-&gt;msgReqProg      = false;

memset(&amp;me-&gt;basicMsg, 0, sizeof(me-&gt;basicMsg));
memset(&amp;me-&gt;payloadMsgUnion, 0, sizeof(me-&gt;payloadMsgUnion));
memset(me-&gt;dataBuf, 0, sizeof(me-&gt;dataBuf));</entry>
      <tran trig="SER_RECEIVED">
       <action>LrgDataEvt *cliEvt = Q_NEW(LrgDataEvt, CLI_RECEIVED_SIG);
cliEvt-&gt;dataLen = base64_decode(
    (char *)((LrgDataEvt const *) e)-&gt;dataBuf,
    ((LrgDataEvt const *) e)-&gt;dataLen,
    (char *)cliEvt-&gt;dataBuf,
    DC3_MAX_MSG_LEN
);

cliEvt-&gt;src = ((LrgDataEvt const *) e)-&gt;src;
cliEvt-&gt;dst = ((LrgDataEvt const *) e)-&gt;dst;

QACTIVE_POST(
    AO_CommMgr,
    (QEvt *)(cliEvt),
    AO_CommMgr
);</action>
       <tran_glyph conn="6,36,3,-1,18">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="CLI_RECEIVED" target="../../2/1">
       <action>/* Extract the basicMsg first */
memset(&amp;(me-&gt;basicMsg), 0, sizeof(me-&gt;basicMsg));
me-&gt;basicMsgOffset = DC3BasicMsg_read_delimited_from(
    (void*)((LrgDataEvt const *) e)-&gt;dataBuf,
    &amp;(me-&gt;basicMsg),
    0
);

/* Store the event source and destination before entering a new state where that 
 * information will be lost. */
me-&gt;cliEvtSrc = ((LrgDataEvt const *) e)-&gt;src;
me-&gt;cliEvtDst = ((LrgDataEvt const *) e)-&gt;dst;

/* Store the basic msg elements locally since they are needed to send back all the 
 * ack, prog, and done replies. */
me-&gt;msgRoute   = me-&gt;basicMsg._msgRoute;
me-&gt;msgId      = me-&gt;basicMsg._msgID;
me-&gt;msgReqProg = (bool)(me-&gt;basicMsg._msgReqProg);
me-&gt;msgPayloadName = me-&gt;basicMsg._msgPayload; // save this since Ack will overwrite it

/* Extract the payload (if exists) since this buffer is going away the moment we get
 * into a state.  We'll figure out later if it's valid, right before we send an Ack */
switch( me-&gt;msgPayloadName ) {
    case _DC3NoMsg:
        DBG_printf(&quot;No payload detected\n&quot;);
        break;
    case _DC3StatusPayloadMsg:
        WRN_printf(&quot;Status payload detected, this is probably an error\n&quot;);
        break;
    case _DC3VersionPayloadMsg:
        WRN_printf(&quot;Version payload detected, this is probably an error\n&quot;);
        break;
    case _DC3BootModePayloadMsg:
        DBG_printf(&quot;BootMode payload detected\n&quot;);
        DC3BootModePayloadMsg_read_delimited_from(
            ((LrgDataEvt *) e)-&gt;dataBuf,
            &amp;(me-&gt;payloadMsgUnion.bootmodePayload),
            me-&gt;basicMsgOffset
        );
        break;
    case _DC3FlashMetaPayloadMsg:
        DC3FlashMetaPayloadMsg_read_delimited_from(
            ((LrgDataEvt *) e)-&gt;dataBuf,
            &amp;(me-&gt;payloadMsgUnion.flashMetaPayload),
            me-&gt;basicMsgOffset
        );
        break;
    case _DC3FlashDataPayloadMsg:
        DC3FlashDataPayloadMsg_read_delimited_from(
            ((LrgDataEvt *) e)-&gt;dataBuf,
            &amp;(me-&gt;payloadMsgUnion.flashDataPayload),
            me-&gt;basicMsgOffset
        );
        break;
    default:
        WRN_printf(
            &quot;Unknown payload detected: %d, this is probably an error\n&quot;,
            me-&gt;msgPayloadName
        );
        break;
}</action>
       <tran_glyph conn="6,15,3,3,83">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="6,8,28,128">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="Busy">
      <documentation>/**
 * @brief	Busy state for msg processing.
 * This state handles msg processing and indicates that the system is busy and
 * cannot process another msg at this time.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
      <entry>/* Arm the timer so if the message can't be processed for some reason, we can get
 * back to idle state.  This timer may be re-armed if some messages require more 
 * time to process than others. */
QTimeEvt_rearm(
    &amp;me-&gt;commMgrTimerEvt,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_COMM_MSG_PROCESS )
);

/* Compose and send Ack response.  We can re-use the current structure since only
 * one non-essential field changes. */
me-&gt;basicMsg._msgType    = _DC3_Ack;
me-&gt;basicMsg._msgPayload = _DC3NoMsg; // This was saved earlier
/* The rest of the fields are the same */

/* Serialize the msg into a buffer of a fresh event. This event will be passed to
 * a function which will post it directly to the correct AO. */
LrgDataEvt *evt = Q_NEW(LrgDataEvt, CLI_SEND_DATA_SIG);
/* The src and dst are swapped on purpose since we have to tell the message to go
 * to where it originally came from. */
evt-&gt;dst = me-&gt;cliEvtSrc;
evt-&gt;src = me-&gt;cliEvtDst;
evt-&gt;dataLen = DC3BasicMsg_write_delimited_to(&amp;(me-&gt;basicMsg), evt-&gt;dataBuf, 0);
me-&gt;errorCode = Comm_sendToClient( evt );
if ( ERR_NONE != me-&gt;errorCode ) {
    WRN_printf(&quot;Possible error sending Ack, attempting to continue. Error: 0x%08x\n&quot;, me-&gt;errorCode);
}</entry>
      <exit>QTimeEvt_disarm(&amp;me-&gt;commMgrTimerEvt);                 /* Disarm timer on exit */

/* Set the fields of the msg common for all Done msgs regardless of status or msg */
me-&gt;basicMsg._msgType    = _DC3_Done;
me-&gt;basicMsg._msgRoute   = me-&gt;msgRoute;
me-&gt;basicMsg._msgID      = me-&gt;msgId;
me-&gt;basicMsg._msgReqProg = (unsigned long)me-&gt;msgReqProg;

/* The command specific fields should have already been set up by their respective
 * exit transitions */
LrgDataEvt *evt = Q_NEW(LrgDataEvt, CLI_SEND_DATA_SIG);
evt-&gt;dataLen = DC3BasicMsg_write_delimited_to(&amp;me-&gt;basicMsg, evt-&gt;dataBuf, 0);
/* The src and dst are swapped on purpose since we have to tell the message to go
 * to where it originally came from. */
evt-&gt;dst = me-&gt;cliEvtSrc;
evt-&gt;src = me-&gt;cliEvtDst;
evt-&gt;dataLen = DC3BasicMsg_write_delimited_to(&amp;(me-&gt;basicMsg), evt-&gt;dataBuf, 0);

/* Append payload msg if needed */
switch( me-&gt;msgPayloadName ) {
    case _DC3StatusPayloadMsg:
        evt-&gt;dataLen = DC3StatusPayloadMsg_write_delimited_to(
            (void*)&amp;(me-&gt;payloadMsgUnion.statusPayload),
            evt-&gt;dataBuf,
            evt-&gt;dataLen
        );
        break;
    case _DC3VersionPayloadMsg:
        DBG_printf(&quot;Sending version payload\n&quot;);
        evt-&gt;dataLen = DC3VersionPayloadMsg_write_delimited_to(
            (void*)&amp;(me-&gt;payloadMsgUnion.versionPayload),
            evt-&gt;dataBuf,
            evt-&gt;dataLen
        );
        break;
    case _DC3BootModePayloadMsg:
        DBG_printf(&quot;Sending bootMode payload\n&quot;);
        evt-&gt;dataLen = DC3BootModePayloadMsg_write_delimited_to(
            (void*)&amp;(me-&gt;payloadMsgUnion.bootmodePayload),
            evt-&gt;dataBuf,
            evt-&gt;dataLen
        );
        break;
    case _DC3FlashMetaPayloadMsg:
        DBG_printf(&quot;Sending FlashMeta payload\n&quot;);
        evt-&gt;dataLen = DC3FlashMetaPayloadMsg_write_delimited_to(
            (void*)&amp;(me-&gt;payloadMsgUnion.flashMetaPayload),
            evt-&gt;dataBuf,
            evt-&gt;dataLen
        );
        break;
    case _DC3FlashDataPayloadMsg:
        DBG_printf(&quot;Sending FlashData payload\n&quot;);
        evt-&gt;dataLen = DC3FlashDataPayloadMsg_write_delimited_to(
            (void*)&amp;(me-&gt;payloadMsgUnion.flashDataPayload),
            evt-&gt;dataBuf,
            evt-&gt;dataLen
        );
        break;
    case _DC3NoMsg:
        WRN_printf(&quot;Not sending payload as part of Done msg.\n&quot;);
        break;
    default:
        WRN_printf(&quot;Unknown payload detected %d, this is probably an error\n&quot;,
            me-&gt;msgPayloadName
        );
        break;
}

/* Send the Done msg buffer to the client */
me-&gt;errorCode = Comm_sendToClient( evt );
if ( ERR_NONE != me-&gt;errorCode ) {
    WRN_printf(&quot;Possible error sending Done, attempting to continue. Error: 0x%08x\n&quot;, me-&gt;errorCode);
}

if ( ERR_NONE != me-&gt;errorCode ) {
    WRN_printf(&quot;Send Done msg with status: 0x%08x\n&quot;, me-&gt;errorCode);
}</exit>
      <tran trig="COMM_MGR_TIMEOUT" target="../../1">
       <action>ERR_printf(&quot;COMM_MGR_TIMEOUT trying to process %d basic msg, error: 0x%08x\n&quot;,
    me-&gt;basicMsg._msgName, me-&gt;errorCode);</action>
       <tran_glyph conn="58,132,3,1,-24">
        <action box="-19,-2,19,2"/>
       </tran_glyph>
      </tran>
      <state name="ValidateMsg">
       <documentation>/**
 * @brief	State that ensures the system stays in the Busy state while processing.
 * This state just self-posts an event to start the msg processing. Its primary
 * reason for existance is to make sure that the state machine ends up inside the
 * busy state for proper error handling (if any occur).
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
       <entry>QTimeEvt_rearm(                                       /* Re-arm timer on entry */
    &amp;me-&gt;commOpTimerEvt,
    SEC_TO_TICKS( LL_MAX_TOUT_SEC_COMM_MSG_VALIDATE_MSG_OP )
);

/* Post to self to leave the state and continue processing the rest of the msg */
QEvt *evt = Q_NEW(QEvt, MSG_PROCESS_SIG);
QACTIVE_POST(AO_CommMgr, (QEvt *)(evt), AO_CommMgr);</entry>
       <exit>QTimeEvt_disarm(&amp;me-&gt;commOpTimerEvt);                  /* Disarm timer on exit */</exit>
       <tran trig="MSG_PROCESS">
        <choice target="../../../../1">
         <guard brief="GetBootMode?">_DC3GetBootModeMsg == me-&gt;basicMsg._msgName</guard>
         <action>me-&gt;errorCode = ERR_NONE;

DBG_printf(&quot;_DC3GetBootModeMsg decoded, attempting to decode payload (if exists)\n&quot;);

/* Compose Done response.  We can re-use the current structure and it will be used by
 * the exit action of the parent state to send the msg.  Here, we only set up fields
 * that are specific to this response. We can also destructively change the payload
 * name since we are sending a response right after this. */
me-&gt;msgPayloadName = _DC3BootModePayloadMsg;

/* Don't change the basicMsg name since it should be the same in all cases. */
me-&gt;basicMsg._msgPayload = me-&gt;msgPayloadName;
me-&gt;payloadMsgUnion.bootmodePayload._errorCode = me-&gt;errorCode;
me-&gt;payloadMsgUnion.bootmodePayload._bootMode  = _DC3_Application; // This is the bootloader
DBG_printf(&quot;Setting bootMode payload with bootmode: %d\n&quot;, me-&gt;payloadMsgUnion.bootmodePayload._bootMode);</action>
         <choice_glyph conn="91,25,4,1,3,-57">
          <action box="-11,1,10,2"/>
         </choice_glyph>
        </choice>
        <choice target="../../../../1">
         <guard>else</guard>
         <action>me-&gt;errorCode = ERR_MSG_UNKNOWN_BASIC;
ERR_printf(
    &quot;Unknown msg (%d) with msgId=%d. Sending back error: 0x%08x\n&quot;,
    me-&gt;basicMsg._msgName, me-&gt;msgId, me-&gt;errorCode);

/* Compose Done response.  We can re-use the current structure and it will be used by
 * the exit action of the parent state to send the msg.  Here, we only set up fields
 * that are specific to this response. We can also destructively change the payload 
 * name since we are sending a response right after this. */
me-&gt;msgPayloadName = _DC3StatusPayloadMsg;

/* Don't change the basicMsg name since we don't actually know what it is but add a 
 * status payload msg to let the user know the error. */
me-&gt;basicMsg._msgPayload = me-&gt;msgPayloadName;
me-&gt;payloadMsgUnion.statusPayload._errorCode = me-&gt;errorCode;


</action>
         <choice_glyph conn="91,25,5,1,-57">
          <action box="-8,-2,8,2"/>
         </choice_glyph>
        </choice>
        <choice target="../../../../1">
         <guard brief="Unsupported?">_DC3FlashMsg == me-&gt;basicMsg._msgName</guard>
         <action>me-&gt;errorCode = ERR_MSG_UNSUPPORTED_IN_APPLICATION;
</action>
         <choice_glyph conn="91,25,4,1,33,-57">
          <action box="-10,31,10,2"/>
         </choice_glyph>
        </choice>
        <choice>
         <guard brief="SetBootMode?">_DC3SetBootModeMsg == me-&gt;basicMsg._msgName</guard>
         <action>DBG_printf(&quot;_DC3SetBootModeMsg decoded, attempting to decode payload (if exists)\n&quot;);
</action>
         <choice target="../../../../../1">
          <guard>else</guard>
          <action>/* Has to be set after checking for a valid payload */
me-&gt;msgPayloadName = _DC3StatusPayloadMsg;
me-&gt;basicMsg._msgPayload = me-&gt;msgPayloadName;

me-&gt;errorCode = ERR_MSG_UNEXPECTED_PAYLOAD;
ERR_printf(
    &quot;Invalid payload for SetBootMode.  Expected BootmodePayload (%d), got (%d). Error: 0x%08x\n&quot;,
    _DC3BootModePayloadMsg, me-&gt;msgPayloadName, me-&gt;errorCode
);
</action>
          <choice_glyph conn="76,31,5,1,-42">
           <action box="-5,0,5,2"/>
          </choice_glyph>
         </choice>
         <choice>
          <guard brief="ValidPayload?">_DC3BootModePayloadMsg == me-&gt;msgPayloadName</guard>
          <action>/* Has to be set after checking for a valid payload */
me-&gt;msgPayloadName = _DC3StatusPayloadMsg;
me-&gt;basicMsg._msgPayload = me-&gt;msgPayloadName;</action>
          <choice target="../../../../../../1">
           <guard brief="Application?">_DC3_Application == me-&gt;payloadMsgUnion.bootmodePayload._bootMode</guard>
           <action>me-&gt;errorCode = ERR_NONE;
DBG_printf(&quot;Already in Application mode\n&quot;);</action>
           <choice_glyph conn="69,34,4,1,6,-35">
            <action box="-9,6,10,2"/>
           </choice_glyph>
          </choice>
          <choice target="../../../../../../1">
           <guard brief="Bootloader?">_DC3_Bootloader == me-&gt;payloadMsgUnion.bootmodePayload._bootMode</guard>
           <action>me-&gt;errorCode = ERR_NONE;
DBG_printf(&quot;Resetting system to get back to bootloader mode\n&quot;);

/* Post to self to boot to application but still have enough time to send a Done */
QEvt *evt = Q_NEW(QEvt, BOOT_RESET_SIG);
QACTIVE_POST(AO_CommMgr, (QEvt *)(evt), AO_CommMgr);</action>
           <choice_glyph conn="69,34,4,1,3,-35">
            <action box="-9,3,10,2"/>
           </choice_glyph>
          </choice>
          <choice target="../../../../../../1">
           <guard>else</guard>
           <action>me-&gt;errorCode = ERR_COMM_INVALID_BOOTMODE_REQUESTED;
ERR_printf(&quot;Unsupported bootmode requested (%d). Error: 0x%08x\n&quot;,
    me-&gt;payloadMsgUnion.bootmodePayload._bootMode, me-&gt;errorCode
);</action>
           <choice_glyph conn="69,34,5,1,-35">
            <action box="-6,0,5,2"/>
           </choice_glyph>
          </choice>
          <choice_glyph conn="76,31,4,-1,3,-7">
           <action box="0,1,11,2"/>
          </choice_glyph>
         </choice>
         <choice_glyph conn="91,25,4,-1,6,-15">
          <action box="-11,4,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="91,19,2,-1,6">
         <action box="0,0,12,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="89,13,14,6">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="58,8,88,128">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="3,3,145,138">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="150,143"/>
   </statechart>
  </class>
  <attribute name="AO_CommMgr" type="QActive * const" visibility="0x00" properties="0x00">
   <documentation>/**&lt; &quot;opaque&quot; pointer to the Active Object */</documentation>
  </attribute>
  <operation name="CommMgr_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief C &quot;constructor&quot; for CommMgr &quot;class&quot;.
 * Initializes all the timers and queues used by the AO and sets of the
 * first state.
 * @param  None
 * @param  None
 * @retval None
 */</documentation>
   <code>CommMgr *me = &amp;l_CommMgr;
QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;CommMgr_initial);
QTimeEvt_ctor(&amp;me-&gt;commMgrTimerEvt, COMM_MGR_TIMEOUT_SIG);
QTimeEvt_ctor(&amp;me-&gt;commOpTimerEvt, COMM_OP_TIMEOUT_SIG);</code>
  </operation>
  <operation name="Comm_sendToClient" type="DC3Error_t" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief	Wrapper around serial and UDP send data function.
 * This function acts as a simple wrapper around serial and UDP ethernet send data
 * functions to allow easy posting of events to send out data over those interfaces.
 * @param [in] *evt: LrgDataEvt pointer to event to send.
 * @return: DC3Error_t indicating status of operation.
 */</documentation>
   <parameter name="evt" type="LrgDataEvt*"/>
   <code>DC3Error_t status = ERR_NONE;
if ( _DC3_Serial == evt-&gt;dst ) {
    uint8_t encDataBuf[DC3_MAX_MSG_LEN];
    memset(encDataBuf, 0, sizeof(encDataBuf));
    uint16_t encDataLen = base64_encode(
          (char *)(evt-&gt;dataBuf),
          evt-&gt;dataLen,
          (char *)encDataBuf,
          DC3_MAX_MSG_LEN
    );

    if(encDataLen &lt; 1) {
        status = ERR_SERIAL_MSG_BASE64_ENC_FAILED;
        ERR_printf(
            &quot;Base64 encoding ran out of space, error: 0x%08x\n&quot;,
            status
        );
        /* Set so we don't error out copying.  Client should know how to
         * to properly handle this */
        encDataLen = 1;
    }

    /* Modify the contents of the event with the new encoded data and send
     * it regardless of whether we*/
    evt-&gt;dataLen = encDataLen;
    MEMCPY( evt-&gt;dataBuf, encDataBuf, evt-&gt;dataLen);
    evt-&gt;dst = _DC3_Serial;
    evt-&gt;src = _DC3_Serial;

    /* Directly post to the LWIPMgr AO. */
    QACTIVE_POST( AO_SerialMgr, (QEvt *)(evt), 0 );

} else { /* Always attempt to send over UDP to prevent leaking the event */
    /* No modifications needed to the UDP send so just post it directly to that AO.*/
    /* Directly post to the LWIPMgr AO. */
    QACTIVE_POST( AO_LWIPMgr, (QEvt *)(evt), 0 );
}

/* If we got here, src or dst was not set up properly. */
return status;</code>
  </operation>
 </package>
 <directory name=".">
  <file name="CommMgr_gen.c">
   <text>/**
 * @file    CommMgr.c
 * Declarations for functions for the CommMgr AO.  This state
 * machine handles all incoming messages and their distribution for the
 * bootloader.
 *
 * Note: If editing this file, please make sure to update the CommMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    05/27/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 *
 * @addtogroup groupComm
 * @{
 */

/* Includes ------------------------------------------------------------------*/
#include &quot;CommMgr.h&quot;
#include &quot;project_includes.h&quot;           /* Includes common to entire project. */
#include &quot;bsp.h&quot;                              /* For time to ticks conversion */
#include &quot;I2C1DevMgr.h&quot;                                  /* For I2C Evt types */
#include &quot;time.h&quot;
#include &quot;stm32f4x7_eth.h&quot;
#include &quot;serial.h&quot;                               /* For serial functionality */
#include &quot;LWIPMgr.h&quot;                        /* For UDP ethernet functionality */
#include &quot;base64_wrapper.h&quot;                            /* For base64 encoding */
#include &quot;SerialMgr.h&quot;
#include &quot;LWIPMgr.h&quot;
#include &quot;SysMgr.h&quot;
#include &quot;version.h&quot;

/* Compile-time called macros ------------------------------------------------*/
Q_DEFINE_THIS_FILE;                 /* For QSPY to know the name of this file */
DBG_DEFINE_THIS_MODULE( DBG_MODL_COMM );/* For debug system to ID this module */

/* Private typedefs ----------------------------------------------------------*/
$declare(AOs::CommMgr)

/* Private defines -----------------------------------------------------------*/
/* Private macros ------------------------------------------------------------*/
/* Private variables and Local objects ---------------------------------------*/

static CommMgr l_CommMgr; /* the single instance of the Interstage active object */

/* Global-scope objects ----------------------------------------------------*/
QActive * const AO_CommMgr = (QActive *)&amp;l_CommMgr;  /* &quot;opaque&quot; AO pointer */

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
$define(AOs::CommMgr_ctor)
$define(AOs::Comm_sendToClient)
$define(AOs::CommMgr)

/**
 * @} end addtogroup groupComm
 */

/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
  <file name="CommMgr_gen.h">
   <text>/**
 * @file    CommMgr.h
 * Declarations for functions for the CommMgr AO.  This state
 * machine handles all incoming messages and their distribution for the
 * bootloader.
 *
 * Note: If editing this file, please make sure to update the CommMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    05/27/2014
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2014 Datacard. All rights reserved.
 *
 * @addtogroup groupComm
 * @{
 */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef COMMMGR_H_
#define COMMMGR_H_

/* Includes ------------------------------------------------------------------*/
#include &quot;qp_port.h&quot;                                        /* for QP support */
#include &quot;DC3CommApi.h&quot;              /* For API for communicating with client */
#include &quot;DC3Signals.h&quot;             /* For QP signals available to the system */

/* Exported defines ----------------------------------------------------------*/
/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
/* Exported constants --------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
$declare(AOs::CommMgr_ctor)
$declare(AOs::Comm_sendToClient)
$declare(AOs::AO_CommMgr)

/* Don't declare the MsgEvt type here since it needs to be visible to LWIP, 
 * which is a shared port common to any ethernet project.  Instead, it's 
 * declared in Shared.h, which is included by LWIPMgr.h */
/* $declare(Events) */

/**
 * @} end addtogroup groupComm
 */

#endif                                                          /* COMMMGR_H_ */
/******** Copyright (C) 2014 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
 </directory>
</model>
