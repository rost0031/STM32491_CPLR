<?xml version="1.0" encoding="UTF-8"?>
<model version="3.2.2">
 <documentation>/**
 * CommStackMgr Active Object which.  This AO handles all communications work.
 */</documentation>
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="DBReadReqEvt" superclass="qpc::QEvt">
   <documentation>/**
 * @brief Event struct type for specifying a DB read request.
 */</documentation>
   <attribute name="accessType" type="AccessType_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Specifies whether the request came from FreeRTOS thread or another AO */</documentation>
   </attribute>
   <attribute name="dbElem" type="DB_Elem_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; DB element */</documentation>
   </attribute>
  </class>
  <class name="DBWriteReqEvt" superclass="qpc::QEvt">
   <documentation>/**
 * @brief Event struct type for specifying a DB read request.
 */</documentation>
   <attribute name="accessType" type="AccessType_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Specifies whether the request came from FreeRTOS thread or another AO */</documentation>
   </attribute>
   <attribute name="dbElem" type="DB_Elem_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; DB element */</documentation>
   </attribute>
   <attribute name="dataBuf[MAX_DB_ELEM_SIZE]" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Buffer that holds the data to write */</documentation>
   </attribute>
   <attribute name="dataLen" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Length of data in dataBuf */</documentation>
   </attribute>
  </class>
  <class name="DBReadDoneEvt" superclass="qpc::QEvt">
   <documentation>/**
 * @brief Event struct type for specifying a DB read request.
 */</documentation>
   <attribute name="dbElem" type="DB_Elem_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; DB element */</documentation>
   </attribute>
   <attribute name="dataBuf[MAX_DB_ELEM_SIZE]" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Buffer that holds the data read from DB */</documentation>
   </attribute>
   <attribute name="dataLen" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Length of data in dataBuf */</documentation>
   </attribute>
   <attribute name="status" type="CBErrorCode" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Status of the operation */</documentation>
   </attribute>
  </class>
  <class name="DBWriteDoneEvt" superclass="qpc::QEvt">
   <documentation>/**
 * @brief Event struct type for specifying a DB read request.
 */</documentation>
   <attribute name="dbElem" type="DB_Elem_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; DB element */</documentation>
   </attribute>
   <attribute name="status" type="CBErrorCode" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Status of the operation */</documentation>
   </attribute>
  </class>
 </package>
 <package name="AOs" stereotype="0x02">
  <class name="SysMgr" superclass="qpc::QActive">
   <documentation>/**
 * \brief SysMgr &quot;class&quot;
 */</documentation>
   <attribute name="errorCode" type="CBErrorCode" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keep track of errors that may occur in the AO */</documentation>
   </attribute>
   <attribute name="deferredEvtQueue" type="QEQueue" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Native QF queue for deferred request events. */</documentation>
   </attribute>
   <attribute name="deferredEvtQSto[10]" type="QTimeEvt const *" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Storage for deferred event queue. */</documentation>
   </attribute>
   <attribute name="sysTimerEvt" type="QTimeEvt" visibility="0x01" properties="0x00">
    <documentation>/**&lt; QPC timer Used to timeout overall SysMgr interactions. */</documentation>
   </attribute>
   <attribute name="dbTimerEvt" type="QTimeEvt" visibility="0x01" properties="0x00">
    <documentation>/**&lt; QPC timer Used to timeout DB accesses. */</documentation>
   </attribute>
   <attribute name="accessType" type="AccessType_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Access type of current request (used for DB access) */</documentation>
   </attribute>
   <attribute name="dbCmd" type="DB_Operation_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; DB command of current request (used for DB access to guarantee a reply) */</documentation>
   </attribute>
   <attribute name="dataBuf[MAX_DB_ELEM_SIZE]" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Buffer that holds the data for read results from any device we have to wait for */</documentation>
   </attribute>
   <attribute name="dataLen" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Length of data in dataBuf */</documentation>
   </attribute>
   <attribute name="dbElem" type="DB_Elem_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; DB element to get or set with the current request (used for DB access to guarantee a reply) */</documentation>
   </attribute>
   <attribute name="isDBValid" type="bool" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Flag that keeps track of whether DB is valid.  Starts out false but gets set to
 * true after checking. */</documentation>
   </attribute>
   <attribute name="currRetry" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Current retry number. Used throughout the state machine to make sure we don't 
 * get stuck in an inf loop when retrying */</documentation>
   </attribute>
   <statechart>
    <initial target="../1/0">
     <action>(void)e;        /* suppress the compiler warning about unused parameter */

QS_OBJ_DICTIONARY(&amp;l_CommMgr);
QS_FUN_DICTIONARY(&amp;QHsm_top);
QS_FUN_DICTIONARY(&amp;CommMgr_initial);
QS_FUN_DICTIONARY(&amp;CommMgr_Active);

/* Subscribe to I2C read and write done signals since it will be publishing them */
QActive_subscribe((QActive *)me, I2C1_DEV_READ_DONE_SIG);
QActive_subscribe((QActive *)me, I2C1_DEV_WRITE_DONE_SIG);
QActive_subscribe((QActive *)me, DB_GET_ELEM_SIG);
QActive_subscribe((QActive *)me, DB_SET_ELEM_SIG);

me-&gt;isDBValid = false;

/* Post to self to validate DB on startup */
QEvt *evt = Q_NEW(QEvt, DB_CHECK_SIG);
QACTIVE_POST(AO_SysMgr, (QEvt *)(evt), me);

#if CPLR_BOOT
/* If this is the bootloader, also validate the bootloader build datetime 
 * and version in the DB. */
QEvt *evt1 = Q_NEW(QEvt, DB_CHECK_BOOTLDR_VER_SIG);
QACTIVE_POST(AO_SysMgr, (QEvt *)evt1, me);
#endif</action>
     <initial_glyph conn="1,2,4,3,9,5">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="Active">
     <documentation>/**
 * This state is a catch-all Active state.  If any signals need
 * to be handled that do not cause state transitions and are
 * common to the entire AO, they should be handled here.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
     <entry>/* Post and disarm all the timer events so they can be rearmed at any time */
QTimeEvt_postIn(
    &amp;me-&gt;sysTimerEvt,
    (QActive *)me,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_SYS_MGR )
);
QTimeEvt_disarm(&amp;me-&gt;sysTimerEvt);

QTimeEvt_postIn(
    &amp;me-&gt;dbTimerEvt,
    (QActive *)me,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_SYS_MGR )
);
QTimeEvt_disarm(&amp;me-&gt;dbTimerEvt);</entry>
     <state name="Idle">
      <documentation>/**
 * @brief	Idle state that allows new messages to be received.
 * The Idle state allows for handling of new incoming msgs. Msgs in other states
 * will be either deferred or ignored.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
      <entry>/* Clear out all the variables on entry to Idle state.  By this point, any error
 * feedback should have already happened. */
me-&gt;errorCode       = ERR_NONE;
me-&gt;accessType      = ACCESS_NONE;
me-&gt;dbCmd           = DB_OP_NONE;
me-&gt;dataLen         = 0;
me-&gt;currRetry       = 0;
memset(me-&gt;dataBuf, 0, sizeof(me-&gt;dataBuf));

/* recall the request from the private requestQueue */
QActive_recall(
    (QActive *)me,
    &amp;me-&gt;deferredEvtQueue
);
</entry>
      <tran trig="DB_GET_ELEM" target="../../1/2">
       <action>DBG_printf(&quot;DB_GET_ELEM, posting DB_READ\n&quot;);

me-&gt;dbCmd = DB_OP_READ;
me-&gt;accessType = ((DBReadReqEvt const *)e)-&gt;accessType;
me-&gt;dbElem = ((DBReadReqEvt const *)e)-&gt;dbElem;

/* Change the signal associated with event and re post to self so it gets handled
 * in the AccessingDB state without having to recopy all the data in the event. */
((DBReadReqEvt *)e)-&gt;super.sig = DB_READ_SIG;
QACTIVE_POST(AO_SysMgr, (QEvt *)e, me);</action>
       <tran_glyph conn="6,18,3,3,33">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DB_SET_ELEM" target="../../1/2">
       <action>DBG_printf(&quot;DB_SET_ELEM, posting DB_WRITE\n&quot;);

me-&gt;dbCmd = DB_OP_WRITE;
me-&gt;accessType = ((DBReadReqEvt const *)e)-&gt;accessType;
me-&gt;dbElem = ((DBReadReqEvt const *)e)-&gt;dbElem;

/* Change the signal associated with event and re post to self so it gets handled
 * in the AccessingDB state without having to recopy all the data in the event. */
((DBWriteReqEvt *)e)-&gt;super.sig = DB_WRITE_SIG;
QACTIVE_POST(AO_SysMgr, (QEvt *)e, me);</action>
       <tran_glyph conn="6,21,3,3,33">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DB_CHECK" target="../../1/2/6">
       <action>me-&gt;dbCmd = DB_OP_INTERNAL;</action>
       <tran_glyph conn="6,37,3,3,35">
        <action box="0,-2,11,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DB_CHECK_BOOTLDR_VER" target="../../1/2/9">
       <action>me-&gt;dbCmd = DB_OP_INTERNAL;</action>
       <tran_glyph conn="6,82,3,3,82,-53,7">
        <action box="0,-2,17,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="6,8,14,113">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="Busy">
      <documentation>/**
 * @brief	Busy state for msg processing.
 * This state handles msg processing and indicates that the system is busy and
 * cannot process another msg at this time.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
      <entry>/* Arm the timer so if the message can't be processed for some reason, we can get
 * back to idle state.  This timer may be re-armed if some messages require more 
 * time to process than others. */
QTimeEvt_rearm(
    &amp;me-&gt;sysTimerEvt,
    SEC_TO_TICKS( LL_MAX_TOUT_SEC_DB_ACCESS )
);
</entry>
      <exit>QTimeEvt_disarm(&amp;me-&gt;sysTimerEvt);                 /* Disarm timer on exit */
</exit>
      <tran trig="SYS_MGR_TIMEOUT" target="../../0">
       <tran_glyph conn="37,118,3,1,-17">
        <action box="-15,-2,14,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DB_SET_ELEM, DB_GET_ELEM, DB_CHECK, DB_CHECK_BOOTLDR_VER">
       <action>if (QEQueue_getNFree(&amp;me-&gt;deferredEvtQueue) &gt; 0) {
   /* defer the request - this event will be handled
    * when the state machine goes back to Idle state */
   QActive_defer((QActive *)me, &amp;me-&gt;deferredEvtQueue, e);
} else {
   /* notify the request sender that the request was ignored.. */
   ERR_printf(&quot;Unable to defer DB request\n&quot;);
}</action>
       <tran_glyph conn="37,116,3,-1,34">
        <action box="0,-7,20,6"/>
       </tran_glyph>
      </tran>
      <state name="AccessingDB">
       <documentation>/**
 * @brief    State that waits for DB access to complete.
 * This state handles DB access requests and indicates that the system is busy and
 * cannot process another msg at this time.  It is also used to timeout requests that
 * may have hung.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
       <entry>/* Set the error code in case of timeout */
me-&gt;errorCode = ERR_DB_ACCESS_TIMEOUT;

/* Arm the timer so if DB access is broken, the system can properly return an error */
QTimeEvt_rearm(
    &amp;me-&gt;dbTimerEvt,
    SEC_TO_TICKS( LL_MAX_TOUT_SEC_DB_ACCESS )
);
</entry>
       <exit>QTimeEvt_disarm(&amp;me-&gt;dbTimerEvt);                 /* Disarm timer on exit */

if ( me-&gt;dbCmd == DB_OP_READ ) {
    DBReadDoneEvt *evt = Q_NEW(DBReadDoneEvt, DB_GET_ELEM_DONE_SIG);
    evt-&gt;status = me-&gt;errorCode;
    evt-&gt;dbElem  = me-&gt;dbElem;
    evt-&gt;dataLen = me-&gt;dataLen;
    MEMCPY(evt-&gt;dataBuf, me-&gt;dataBuf, evt-&gt;dataLen);
    DBG_printf(&quot;Publishing DB_GET_ELEM_DONE_SIG with %d len and error 0x%08x\n&quot;,evt-&gt;dataLen, evt-&gt;status);

    if ( ACCESS_FREERTOS == me-&gt;accessType ) {
#if CPLR_APP
        /* Post directly to the &quot;raw&quot; queue for FreeRTOS task to read */
        QEQueue_postFIFO(&amp;CPLR_evtQueue, (QEvt *)evt);
        vTaskResume( xHandle_CPLR );
#elif CPLR_BOOT
        /* Publish the event so other AOs can get it if they want */
        QF_PUBLISH((QEvt *)evt, AO_SysMgr);
#else
    #error &quot;Invalid build.  CPLR_APP or CPLR_BOOT must be specified&quot;
#endif

    } else {
        /* Publish the event so other AOs can get it if they want */
        QF_PUBLISH((QEvt *)evt, AO_SysMgr);
    }

} else if ( me-&gt;dbCmd == DB_OP_WRITE ) {
    DBWriteDoneEvt *evt = Q_NEW(DBWriteDoneEvt, DB_SET_ELEM_DONE_SIG);
    evt-&gt;status = me-&gt;errorCode;
    evt-&gt;dbElem  = me-&gt;dbElem;

    if ( ACCESS_FREERTOS == me-&gt;accessType ) {
#if CPLR_APP
        /* Post directly to the &quot;raw&quot; queue for FreeRTOS task to read */
        QEQueue_postFIFO(&amp;CPLR_evtQueue, (QEvt *)evt);
        vTaskResume( xHandle_CPLR );
#elif CPLR_BOOT
        /* Publish the event so other AOs can get it if they want */
        QF_PUBLISH((QEvt *)evt, AO_SysMgr);
#else
    #error &quot;Invalid build.  CPLR_APP or CPLR_BOOT must be specified&quot;
#endif

    } else {
        /* Publish the event so other AOs can get it if they want */
        QF_PUBLISH((QEvt *)evt, AO_SysMgr);
    }
} else if ( me-&gt;dbCmd == DB_OP_INTERNAL ) {
    /* Do nothing in this case.  Internal operations are for DB
     * validation and similar actions and are initiated intenally so
     * so nobody is expecting a response */
    if ( ERR_NONE != me-&gt;errorCode ) {
        ERR_printf(&quot;Internal DB op failed with error code: 0x%08x\n&quot;, me-&gt;errorCode);
    }
} else {
    me-&gt;errorCode = ERR_DB_ELEM_SIZE_OVERFLOW;
    ERR_printf(&quot;Invalid DB operation (%d) specified somehow\n&quot;, me-&gt;dbCmd);
    DBWriteDoneEvt *evt = Q_NEW(DBWriteDoneEvt, DB_ERROR_SIG);
    evt-&gt;status = me-&gt;errorCode;
    evt-&gt;dbElem  = me-&gt;dbElem;

    if ( ACCESS_FREERTOS == me-&gt;accessType ) {
#if CPLR_APP
        /* Post directly to the &quot;raw&quot; queue for FreeRTOS task to read */
        QEQueue_postFIFO(&amp;CPLR_evtQueue, (QEvt *)evt);
        vTaskResume( xHandle_CPLR );
#elif CPLR_BOOT
        /* Publish the event so other AOs can get it if they want */
        QF_PUBLISH((QEvt *)evt, AO_SysMgr);
#else
    #error &quot;Invalid build.  CPLR_APP or CPLR_BOOT must be specified&quot;
#endif
    } else {
        /* Publish the event so other AOs can get it if they want */
        QF_PUBLISH((QEvt *)evt, AO_SysMgr);
    }
}</exit>
       <tran trig="DB_ACCESS_TIMEOUT" target="../../../0">
        <tran_glyph conn="39,31,3,1,-19">
         <action box="-17,-2,15,2"/>
        </tran_glyph>
       </tran>
       <tran trig="DB_READ">
        <action>LOG_printf(&quot;DB_READ via %d acc to read dbElem: %s\n&quot;, 
    ((DBReadReqEvt const *)e)-&gt;accessType,
    DB_elemToStr( ((DBReadReqEvt const *)e)-&gt;dbElem )
);

/* Find where the element lives */
DB_ElemLoc_t loc = DB_getElemLoc( ((DBReadReqEvt const *)e)-&gt;dbElem );

   /* 3. Call the location dependent functions to retrieve the data from DB */
switch( loc ) {
    case DB_EEPROM:                           /* Intentionally fall through */
    case DB_SN_ROM:                           /* Intentionally fall through */
    case DB_UI_ROM:
        ;
        /* Create the event and directly post it to the right AO. */
        I2CReadReqEvt *i2cReadReqEvt  = Q_NEW(I2CReadReqEvt, I2C1_DEV_RAW_MEM_READ_SIG);
        i2cReadReqEvt-&gt;i2cDev         = DB_getI2CDev(loc);
        i2cReadReqEvt-&gt;addr           = I2C_getMemAddr( i2cReadReqEvt-&gt;i2cDev ) + DB_getElemOffset(((DBReadReqEvt const *)e)-&gt;dbElem);
        i2cReadReqEvt-&gt;bytes          = DB_getElemSize(((DBReadReqEvt const *)e)-&gt;dbElem);
        i2cReadReqEvt-&gt;accessType     = me-&gt;accessType;
        QACTIVE_POST(AO_I2C1DevMgr, (QEvt *)(i2cReadReqEvt), me);
        break;
    case DB_GPIO:
        me-&gt;errorCode = ERR_UNIMPLEMENTED;
        QEvt *evtGPIO = Q_NEW(QEvt, DB_OP_DONE_SIG);
        QACTIVE_POST(AO_SysMgr, evtGPIO, me);
        break;
    case DB_FLASH:
        ;
        me-&gt;errorCode = DB_readEEPROM(
            ((DBReadReqEvt const *)e)-&gt;dbElem,
            MAX_DB_ELEM_SIZE,
            me-&gt;dataBuf,
            &amp;(me-&gt;dataLen)
        );
        QEvt *evtFlash = Q_NEW(QEvt, DB_OP_DONE_SIG);
        QACTIVE_POST(AO_SysMgr, evtFlash, me);
        break;
        /* Add more locations here. Anything that fails will go to the default
         * case and get logged as an error. */
    default:
        me-&gt;errorCode  = ERR_DB_ELEM_NOT_FOUND;
        QEvt *evtNotFound = Q_NEW(QEvt, DB_OP_DONE_SIG);
        QACTIVE_POST(AO_SysMgr, evtNotFound, me);
        break;
}</action>
        <tran_glyph conn="39,24,3,-1,12">
         <action box="0,-2,8,2"/>
        </tran_glyph>
       </tran>
       <tran trig="DB_WRITE">
        <action>LOG_printf(&quot;DB_WRITE via %d acc to write dbElem: %s\n&quot;,
    ((DBReadReqEvt const *)e)-&gt;accessType,
    DB_elemToStr( ((DBReadReqEvt const *)e)-&gt;dbElem )
);

/* Find where the element lives */
DB_ElemLoc_t loc = DB_getElemLoc( ((DBWriteReqEvt const *)e)-&gt;dbElem );

   /* 3. Call the location dependent functions to retrieve the data from DB */
switch( loc ) {
    case DB_EEPROM:
        ;
        /* Create the event and directly post it to the right AO. */
        I2CWriteReqEvt *i2cWriteReqEvt  = Q_NEW(I2CWriteReqEvt, I2C1_DEV_RAW_MEM_WRITE_SIG);
        i2cWriteReqEvt-&gt;i2cDev         = DB_getI2CDev(loc);
        i2cWriteReqEvt-&gt;addr           = I2C_getMemAddr( i2cWriteReqEvt-&gt;i2cDev ) + DB_getElemOffset(((DBWriteReqEvt const *)e)-&gt;dbElem);
        i2cWriteReqEvt-&gt;bytes          = DB_getElemSize(((DBWriteReqEvt const *)e)-&gt;dbElem);
        i2cWriteReqEvt-&gt;accessType     = me-&gt;accessType;
        MEMCPY(i2cWriteReqEvt-&gt;dataBuf, ((DBWriteReqEvt const *)e)-&gt;dataBuf, i2cWriteReqEvt-&gt;bytes);
        QACTIVE_POST(AO_I2C1DevMgr, (QEvt *)(i2cWriteReqEvt), me);
        DBG_printf(&quot;Posting a write req to I2C1DevMgr\n&quot;);
        break;
    case DB_GPIO:                             /* Intentionally fall through */
    case DB_SN_ROM:                           /* Intentionally fall through */
    case DB_UI_ROM:                           /* Intentionally fall through */
    case DB_FLASH:
        me-&gt;errorCode = ERR_DB_ELEM_IS_READ_ONLY;
        QEvt *evt = Q_NEW(QEvt, DB_OP_DONE_SIG);
        QACTIVE_POST(AO_SysMgr, evt, me);
        break;
        /* Add more locations here. Anything that fails will go to the default
         * case and get logged as an error. */
    default:
        me-&gt;errorCode  = ERR_DB_ELEM_NOT_FOUND;
        QEvt *evtNotFound = Q_NEW(QEvt, DB_OP_DONE_SIG);
        QACTIVE_POST(AO_SysMgr, evtNotFound, me);
        break;
}</action>
        <tran_glyph conn="39,27,3,-1,12">
         <action box="0,-2,8,2"/>
        </tran_glyph>
       </tran>
       <tran trig="DB_OP_DONE" target="../../../0">
        <tran_glyph conn="39,29,3,1,-19">
         <action box="-13,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="I2C1_DEV_READ_DONE">
        <action>me-&gt;errorCode = ((I2CReadDoneEvt const *) e)-&gt;status;
if ( ERR_NONE == me-&gt;errorCode ) {
    me-&gt;dataLen = ((I2CReadDoneEvt const *) e)-&gt;bytes;
    if ( me-&gt;dataLen &gt; MAX_DB_ELEM_SIZE ) {
        me-&gt;errorCode = ERR_DB_ELEM_SIZE_OVERFLOW;
    } else {
        MEMCPY(me-&gt;dataBuf, ((I2CReadDoneEvt const *) e)-&gt;dataBuf, me-&gt;dataLen);
    }
}

/* Self post to let the exit condition handle the sending back to requester */
QEvt *evt = Q_NEW(QEvt, DB_OP_DONE_SIG);
QACTIVE_POST(AO_SysMgr, evt, me);</action>
        <tran_glyph conn="138,18,1,-1,-43">
         <action box="-20,-2,18,2"/>
        </tran_glyph>
       </tran>
       <tran trig="I2C1_DEV_WRITE_DONE">
        <action>me-&gt;errorCode = ((I2CWriteDoneEvt const *) e)-&gt;status;

/* Self post to let the exit condition handle the sending back to requester */
QEvt *evt = Q_NEW(QEvt, DB_OP_DONE_SIG);
QACTIVE_POST(AO_SysMgr, evt, me);</action>
        <tran_glyph conn="138,21,1,-1,-43">
         <action box="-20,-2,18,2"/>
        </tran_glyph>
       </tran>
       <state name="DBMagicWordCheck">
        <documentation>/**
 * @brief    Check DB magic number and reset DB to default values if invalid.
 * 
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
        <entry>QTimeEvt_rearm(                                       /* Re-arm timer on entry */
    &amp;me-&gt;dbTimerEvt,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_COMM_DB_VALIDATE )
);

/* Post to SysMgr to get the build datetime first since it's the one most likely to
 * be incorrect */
DBReadReqEvt *evt = Q_NEW(DBReadReqEvt, DB_READ_SIG);
evt-&gt;accessType = ACCESS_QPC;
evt-&gt;dbElem = DB_MAGIC_WORD;
QACTIVE_POST(AO_SysMgr, (QEvt *)(evt), AO_SysMgr);</entry>
        <exit>QTimeEvt_disarm(&amp;me-&gt;dbTimerEvt);                  /* Disarm timer on exit */</exit>
        <tran trig="I2C1_DEV_READ_DONE">
         <action>me-&gt;errorCode = ((I2CReadDoneEvt const *) e)-&gt;status;
if ( ERR_NONE == me-&gt;errorCode ) {
    me-&gt;dataLen = ((I2CReadDoneEvt const *) e)-&gt;bytes;
    if ( me-&gt;dataLen &gt; MAX_DB_ELEM_SIZE ) {
        me-&gt;errorCode = ERR_DB_ELEM_SIZE_OVERFLOW;
    } else {
        MEMCPY(me-&gt;dataBuf, ((I2CReadDoneEvt const *) e)-&gt;dataBuf, me-&gt;dataLen);
    }
}</action>
         <choice>
          <guard brief="NoError?">ERR_NONE == me-&gt;errorCode</guard>
          <action>uint32_t dbMagicWord = 0;
MEMCPY( &amp;dbMagicWord, ((I2CReadDoneEvt const *)e)-&gt;dataBuf, ((I2CReadDoneEvt const *)e)-&gt;bytes );
me-&gt;errorCode = DB_isMagicWordValid( dbMagicWord );




</action>
          <choice target="../../../../7">
           <guard>else</guard>
           <action>WRN_printf(&quot;Invalid DB magic word; expected: 0x%08x read: 0x%08x. Resetting DB. Error: 0x%08x\n&quot;,
    DB_MAGIC_WORD_DEF, dbMagicWord, me-&gt;errorCode);

/* Need to reset the DB */</action>
           <choice_glyph conn="43,49,5,3,17,-11,2">
            <action box="3,-2,4,2"/>
           </choice_glyph>
          </choice>
          <choice target="../../../../8">
           <guard brief="NoError?">ERR_NONE == me-&gt;errorCode</guard>
           <choice_glyph conn="43,49,4,0,3">
            <action box="-7,1,7,2"/>
           </choice_glyph>
          </choice>
          <choice_glyph conn="43,45,4,-1,4">
           <action box="-7,1,7,2"/>
          </choice_glyph>
         </choice>
         <choice target="../../../7">
          <guard>else</guard>
          <action>ERR_printf(&quot;Unable to read Magic Word from DB, need to reset DB. Error: 0x%08x\n&quot;, me-&gt;errorCode);
/* Need to reset the DB */</action>
          <choice_glyph conn="43,45,5,3,16,-8,3">
           <action box="3,-2,5,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="43,40,2,-1,5">
          <action box="0,0,18,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="41,33,15,7">
         <entry box="1,2,6,2"/>
         <exit box="1,4,6,2"/>
        </state_glyph>
       </state>
       <state name="ResetDBMagicWord">
        <documentation>/**
 * @brief   Reset the DB magic word to default values.
 * 
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
        <entry>WRN_printf(&quot;Resetting DB magic word to default...\n&quot;);

/* Post to SysMgr to set the build datetime since it doesn't match the compiled one */
DBWriteReqEvt *evt = Q_NEW(DBWriteReqEvt, DB_WRITE_SIG);
evt-&gt;accessType = ACCESS_QPC;
evt-&gt;dbElem = DB_MAGIC_WORD;
evt-&gt;dataLen =  DB_getElemSize(DB_MAGIC_WORD);
MEMCPY(evt-&gt;dataBuf, (uint8_t *)DB_MAGIC_WORD_DEF,evt-&gt;dataLen);
QACTIVE_POST(AO_SysMgr, (QEvt *)(evt), me);</entry>
        <tran trig="DB_OP_DONE" target="../../10">
         <tran_glyph conn="64,40,2,0,12">
          <action box="0,0,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="62,33,14,7">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="DBVersionCheck">
        <documentation>/**
 * @brief    Check DB version and reset DB to default values if invalid.
 * 
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
        <entry>QTimeEvt_rearm(                                       /* Re-arm timer on entry */
    &amp;me-&gt;dbTimerEvt,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_COMM_DB_VALIDATE )
);

/* Post to SysMgr to get the build datetime first since it's the one most likely to
 * be incorrect */
DBReadReqEvt *evt = Q_NEW(DBReadReqEvt, DB_READ_SIG);
evt-&gt;accessType = ACCESS_QPC;
evt-&gt;dbElem = DB_VERSION;
QACTIVE_POST(AO_SysMgr, (QEvt *)(evt), AO_SysMgr);</entry>
        <exit>QTimeEvt_disarm(&amp;me-&gt;dbTimerEvt);                  /* Disarm timer on exit */</exit>
        <tran trig="I2C1_DEV_READ_DONE">
         <action>me-&gt;errorCode = ((I2CReadDoneEvt const *) e)-&gt;status;
if ( ERR_NONE == me-&gt;errorCode ) {
    me-&gt;dataLen = ((I2CReadDoneEvt const *) e)-&gt;bytes;
    if ( me-&gt;dataLen &gt; MAX_DB_ELEM_SIZE ) {
        me-&gt;errorCode = ERR_DB_ELEM_SIZE_OVERFLOW;
    } else {
        MEMCPY(me-&gt;dataBuf, ((I2CReadDoneEvt const *) e)-&gt;dataBuf, me-&gt;dataLen);
    }
}</action>
         <choice>
          <guard brief="NoError?">ERR_NONE == me-&gt;errorCode</guard>
          <action>uint16_t dbVersion = 0;
MEMCPY( &amp;dbVersion, ((I2CReadDoneEvt const *)e)-&gt;dataBuf, ((I2CReadDoneEvt const *)e)-&gt;bytes );

me-&gt;errorCode = DB_isVersionValid( dbVersion );




</action>
          <choice target="../../../../10">
           <guard>else</guard>
           <action>WRN_printf(&quot;Invalid DB version; expected: 0x%04x read: 0x%04x. Resetting DB. Error: 0x%08x\n&quot;,
    DB_VERSION_DEF, dbVersion, me-&gt;errorCode);
/* Need to reset the DB */</action>
           <choice_glyph conn="43,70,5,3,18,-14,1">
            <action box="3,-2,4,2"/>
           </choice_glyph>
          </choice>
          <choice target="../../../../../../0">
           <guard brief="NoError?">ERR_NONE == me-&gt;errorCode</guard>
           <action>LOG_printf(&quot;DB validation complete.\n&quot;);
me-&gt;isDBValid = true;</action>
           <choice_glyph conn="43,70,5,1,-23">
            <action box="-7,0,7,2"/>
           </choice_glyph>
          </choice>
          <choice_glyph conn="43,65,4,-1,5">
           <action box="-7,1,7,2"/>
          </choice_glyph>
         </choice>
         <choice target="../../../10">
          <guard>else</guard>
          <action>ERR_printf(&quot;Unable to version from DB, need to reset DB. Error: 0x%08x\n&quot;, me-&gt;errorCode);
/* Need to reset the DB */</action>
          <choice_glyph conn="43,65,5,3,17,-10,2">
           <action box="3,-2,5,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="43,59,2,-1,6">
          <action box="0,0,18,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="41,52,15,7">
         <entry box="1,2,6,2"/>
         <exit box="1,4,6,2"/>
        </state_glyph>
       </state>
       <state name="BootLdrBuildDTCheck">
        <documentation>/**
 * @brief    Check bootloader build datetime and fix it if it doesn't match.
 * 
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
        <entry>DBG_printf(&quot;Validating Bootloader build datetime...\n&quot;);

/* Post to SysMgr to get the build datetime first since it's the one most likely to
 * be incorrect */
DBReadReqEvt *evt = Q_NEW(DBReadReqEvt, DB_READ_SIG);
evt-&gt;accessType = ACCESS_QPC;
evt-&gt;dbElem = DB_BOOT_BUILD_DATETIME;
QACTIVE_POST(AO_SysMgr, (QEvt *)(evt), me);</entry>
        <tran trig="I2C1_DEV_READ_DONE">
         <action>me-&gt;errorCode = ((I2CReadDoneEvt const *) e)-&gt;status;
if ( ERR_NONE == me-&gt;errorCode ) {
    me-&gt;dataLen = ((I2CReadDoneEvt const *) e)-&gt;bytes;
    if ( me-&gt;dataLen &gt; MAX_DB_ELEM_SIZE ) {
        me-&gt;errorCode = ERR_DB_ELEM_SIZE_OVERFLOW;
        WRN_printf(&quot;Read Bootloader datetime and it's longer than max size\n&quot;);
    } else {
        MEMCPY(me-&gt;dataBuf, ((I2CReadDoneEvt const *) e)-&gt;dataBuf, me-&gt;dataLen);
    }
}</action>
         <choice>
          <guard brief="NoError?">me-&gt;errorCode == ERR_NONE</guard>
          <action>me-&gt;errorCode = DB_checkDTMatch( ((I2CReadDoneEvt const *) e)-&gt;dataBuf, (uint8_t *)BUILD_DATE );</action>
          <choice target="../../../../11">
           <guard brief="DatetimeDiff?">ERR_NONE != me-&gt;errorCode</guard>
           <action>WRN_printf(&quot;Bootloader datetime mismatch. DB: %s, Compiled: %s\n&quot;, 
    ((I2CReadDoneEvt const *) e)-&gt;dataBuf, BUILD_DATE
);</action>
           <choice_glyph conn="97,40,5,3,16,-12,3">
            <action box="1,-2,9,2"/>
           </choice_glyph>
          </choice>
          <choice target="../../../../13">
           <guard>else</guard>
           <action>DBG_printf(&quot;Bootloader datetime match\n&quot;);</action>
           <choice_glyph conn="97,40,4,0,4">
            <action box="-4,1,6,2"/>
           </choice_glyph>
          </choice>
          <choice_glyph conn="97,37,4,-1,3">
           <action box="-7,0,9,2"/>
          </choice_glyph>
         </choice>
         <choice target="../../../11">
          <guard>else</guard>
          <action>ERR_printf(&quot;DB access resulted in error 0x%08x, aborting attempt to validating the DB\n&quot;, me-&gt;errorCode);</action>
          <choice_glyph conn="97,37,5,3,15,-10,4">
           <action box="2,-2,4,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="97,31,2,-1,6">
          <action box="0,0,15,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="95,25,14,6">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="ResetDBVersion">
        <documentation>/**
 * @brief   Reset the DB version to default value.
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
        <entry>WRN_printf(&quot;Resetting DB version to default...\n&quot;);

/* Post to SysMgr to set the build datetime since it doesn't match the compiled one */
DBWriteReqEvt *evt = Q_NEW(DBWriteReqEvt, DB_WRITE_SIG);
evt-&gt;accessType = ACCESS_QPC;
evt-&gt;dbElem = DB_VERSION;
evt-&gt;dataLen =  DB_getElemSize(DB_VERSION);
MEMCPY(evt-&gt;dataBuf, (uint8_t *)DB_VERSION_DEF,evt-&gt;dataLen);
QACTIVE_POST(AO_SysMgr, (QEvt *)(evt), me);</entry>
        <tran trig="DB_OP_DONE">
         <action>me-&gt;currRetry++;</action>
         <choice target="../../../17">
          <guard brief="Retry?">me-&gt;currRetry &lt; MAX_RETRIES</guard>
          <choice_glyph conn="65,64,5,0,14,5">
           <action box="1,0,10,2"/>
          </choice_glyph>
         </choice>
         <choice target="../../../../../0">
          <guard>else</guard>
          <action>me-&gt;errorCode = ERR_DB_NOT_INIT;
ERR_printf(&quot;Out of retries when attempting to reset DB to a valid state. Error: 0x%08x\n&quot;, me-&gt;errorCode);</action>
          <choice_glyph conn="65,64,4,1,11,-45">
           <action box="0,3,10,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="65,59,2,-1,5">
          <action box="0,0,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="62,52,14,7">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="SetBootLdrDatetime">
        <documentation>/**
 * @brief   Reset the bootloader build datetime.
 * 
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
        <entry>WRN_printf(&quot;Setting bootloader build datetime in DB to %s.\n&quot;, BUILD_DATE);

/* Post to SysMgr to set the build datetime since it doesn't match the compiled one */
DBWriteReqEvt *evt = Q_NEW(DBWriteReqEvt, DB_WRITE_SIG);
evt-&gt;accessType = ACCESS_QPC;
evt-&gt;dbElem = DB_BOOT_BUILD_DATETIME;
evt-&gt;dataLen =  DB_getElemSize(DB_BOOT_BUILD_DATETIME);
MEMCPY(evt-&gt;dataBuf, (uint8_t *)BUILD_DATE, evt-&gt;dataLen);
QACTIVE_POST(AO_SysMgr, (QEvt *)(evt), me);


uint8_t tmp[100] = {0};
uint16_t tmpLen = 0;
CBErrorCode err = CON_hexToStr(
    evt-&gt;dataBuf,                        // data to convert
    evt-&gt;dataLen,                        // length of data to convert
    tmp,                                 // where to write output
    sizeof(tmp),                         // max size of output buffer
    &amp;tmpLen,                             // size of the resulting output
    0,                                   // no columns
    ' ',                                 // separator
    true                                 // bPrintX
);

DBG_printf(
    &quot;Attempting to write %d bytes: %s\n&quot;,
    evt-&gt;dataLen, tmp
);</entry>
        <tran trig="DB_OP_DONE" target="../../12">
         <tran_glyph conn="119,31,2,0,13">
          <action box="0,0,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="116,25,14,6">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="SetBootLdrMajVer">
        <documentation>/**
 * @brief   Reset the bootloader major version.
 * 
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
        <entry>WRN_printf(&quot;Setting bootloader major version in DB to %d\n&quot;, FW_VER_MAJOR );

/* Post to SysMgr to set the major version since we no longer trust it */
DBWriteReqEvt *evt = Q_NEW(DBWriteReqEvt, DB_WRITE_SIG);
evt-&gt;accessType = ACCESS_QPC;
evt-&gt;dbElem = DB_BOOT_MAJ;
evt-&gt;dataLen =  DB_getElemSize(DB_BOOT_MAJ);
evt-&gt;dataBuf[0] = FW_VER_MAJOR;

DBG_printf(&quot;Bootloader major version in byffer after copy: %d\n&quot;, evt-&gt;dataBuf[0] );

QACTIVE_POST(AO_SysMgr, (QEvt *)(evt), me);</entry>
        <tran trig="DB_OP_DONE" target="../../15">
         <tran_glyph conn="119,50,2,0,12">
          <action box="0,0,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="116,44,14,6">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="BootLdrMajVerCheck">
        <documentation>/**
 * @brief    Check bootloader major version and fix it if it doesn't match.
 * 
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
        <entry>/* Post to SysMgr to get the build datetime first since it's the one most likely to
 * be incorrect */
DBReadReqEvt *evt = Q_NEW(DBReadReqEvt, DB_READ_SIG);
evt-&gt;accessType = ACCESS_QPC;
evt-&gt;dbElem = DB_BOOT_MAJ;
QACTIVE_POST(AO_SysMgr, (QEvt *)(evt), me);</entry>
        <tran trig="I2C1_DEV_READ_DONE">
         <action>me-&gt;errorCode = ((I2CReadDoneEvt const *) e)-&gt;status;
if ( ERR_NONE == me-&gt;errorCode ) {
    me-&gt;dataLen = ((I2CReadDoneEvt const *) e)-&gt;bytes;
    if ( me-&gt;dataLen &gt; MAX_DB_ELEM_SIZE ) {
        me-&gt;errorCode = ERR_DB_ELEM_SIZE_OVERFLOW;
        WRN_printf(&quot;Read Bootloader major version and it's longer than max size\n&quot;);
    } else {
        MEMCPY(me-&gt;dataBuf, ((I2CReadDoneEvt const *) e)-&gt;dataBuf, me-&gt;dataLen);
    }
}</action>
         <choice>
          <guard brief="NoError?">me-&gt;errorCode == ERR_NONE</guard>
          <choice target="../../../../12">
           <guard brief="MajVerDiff?">((I2CReadDoneEvt const *) e)-&gt;dataBuf[0] != FW_VER_MAJOR</guard>
           <action>me-&gt;errorCode = ERR_DB_INVALID_MAJ_VER_MISMATCH;
WRN_printf(&quot;Bootloader datetime mismatch. DB: %d, Compiled: %d\n&quot;,
    ((I2CReadDoneEvt const *) e)-&gt;dataBuf[0], FW_VER_MAJOR
);</action>
           <choice_glyph conn="97,58,5,3,16,-10,3">
            <action box="1,-2,9,2"/>
           </choice_glyph>
          </choice>
          <choice target="../../../../14">
           <guard>else</guard>
           <action>DBG_printf(&quot;Bootloader major version match\n&quot;);</action>
           <choice_glyph conn="97,58,4,0,4">
            <action box="-4,1,6,2"/>
           </choice_glyph>
          </choice>
          <choice_glyph conn="97,55,4,-1,3">
           <action box="-7,0,9,2"/>
          </choice_glyph>
         </choice>
         <choice target="../../../12">
          <guard>else</guard>
          <action>ERR_printf(&quot;DB access resulted in error 0x%08x, aborting attempt to validating the DB\n&quot;, me-&gt;errorCode);</action>
          <choice_glyph conn="97,55,5,3,15,-8,4">
           <action box="2,-2,4,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="97,50,2,-1,5">
          <action box="0,0,15,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="95,44,14,6">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="BootLdrMinVerCheck">
        <documentation>/**
 * @brief    Check bootloader minor version and fix it if it doesn't match.
 * 
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
        <entry>/* Post to SysMgr to get the build datetime first since it's the one most likely to
 * be incorrect */
DBReadReqEvt *evt = Q_NEW(DBReadReqEvt, DB_READ_SIG);
evt-&gt;accessType = ACCESS_QPC;
evt-&gt;dbElem = DB_BOOT_MIN;
QACTIVE_POST(AO_SysMgr, (QEvt *)(evt), me);</entry>
        <tran trig="I2C1_DEV_READ_DONE">
         <action>me-&gt;errorCode = ((I2CReadDoneEvt const *) e)-&gt;status;
if ( ERR_NONE == me-&gt;errorCode ) {
    me-&gt;dataLen = ((I2CReadDoneEvt const *) e)-&gt;bytes;
    if ( me-&gt;dataLen &gt; MAX_DB_ELEM_SIZE ) {
        me-&gt;errorCode = ERR_DB_ELEM_SIZE_OVERFLOW;
        WRN_printf(&quot;Read Bootloader minor version and it's longer than max size\n&quot;);
    } else {
        MEMCPY(me-&gt;dataBuf, ((I2CReadDoneEvt const *) e)-&gt;dataBuf, me-&gt;dataLen);
    }
}</action>
         <choice>
          <guard brief="NoError?">me-&gt;errorCode == ERR_NONE</guard>
          <choice target="../../../../15">
           <guard brief="MinVerDiff?">((I2CReadDoneEvt const *) e)-&gt;dataBuf[0] != FW_VER_MINOR</guard>
           <action>WRN_printf(&quot;Bootloader minor version mismatch. DB: %d, Compiled: %d\n&quot;,
    ((I2CReadDoneEvt const *) e)-&gt;dataBuf[0], FW_VER_MINOR
);</action>
           <choice_glyph conn="97,75,5,3,17,-9,2">
            <action box="1,-2,9,2"/>
           </choice_glyph>
          </choice>
          <choice target="../../../../../../0">
           <guard>else</guard>
           <action>DBG_printf(&quot;Bootloader major version match\n&quot;);</action>
           <choice_glyph conn="97,75,4,1,9,-77">
            <action box="-4,2,6,2"/>
           </choice_glyph>
          </choice>
          <choice_glyph conn="97,72,4,-1,3">
           <action box="-7,0,9,2"/>
          </choice_glyph>
         </choice>
         <choice target="../../../15">
          <guard>else</guard>
          <action>ERR_printf(&quot;DB access resulted in error 0x%08x, aborting attempt to validating the DB\n&quot;, me-&gt;errorCode);</action>
          <choice_glyph conn="97,72,5,3,15,-8,4">
           <action box="2,-2,4,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="97,68,2,-1,4">
          <action box="0,0,15,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="95,62,16,6">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="SetBootLdrMinVer">
        <documentation>/**
 * @brief   Reset the bootloader minor version.
 * 
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
        <entry>WRN_printf(&quot;Setting bootloader minor version in DB to %d.\n&quot;, FW_VER_MINOR);

/* Post to SysMgr to set the major version since we no longer trust it */
DBWriteReqEvt *evt = Q_NEW(DBWriteReqEvt, DB_WRITE_SIG);
evt-&gt;accessType = ACCESS_QPC;
evt-&gt;dbElem = DB_BOOT_MIN;
evt-&gt;dataLen =  DB_getElemSize(DB_BOOT_MIN);
evt-&gt;dataBuf[0] = FW_VER_MINOR;
QACTIVE_POST(AO_SysMgr, (QEvt *)(evt), me);</entry>
        <tran trig="DB_OP_DONE">
         <action>me-&gt;currRetry++;</action>
         <choice target="../../../16">
          <guard brief="Retry?">me-&gt;currRetry &lt; MAX_RETRIES</guard>
          <choice_glyph conn="119,73,5,0,7,6">
           <action box="1,0,10,2"/>
          </choice_glyph>
         </choice>
         <choice target="../../../../../0">
          <guard>else</guard>
          <action>me-&gt;errorCode = ERR_DB_NOT_INIT;
ERR_printf(&quot;Out of retries when attempting to reset DB to a valid state. Error: 0x%08x\n&quot;, me-&gt;errorCode);</action>
          <choice_glyph conn="119,73,4,1,12,-99">
           <action box="0,3,10,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="119,68,2,-1,5">
          <action box="0,0,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="116,62,14,6">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="Wait2">
        <documentation>/**
 * @brief   Small timeout to make sure that retries don't overwhelm the logging 
 * system.
 * 
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
        <entry>QTimeEvt_rearm(                                       /* Re-arm timer on entry */
    &amp;me-&gt;dbTimerEvt,
    SEC_TO_TICKS( LL_MAX_TIME_SEC_BETWEEN_RETRIES )
);
</entry>
        <tran trig="DB_ACCESS_TIMEOUT" target="../../9">
         <tran_glyph conn="122,83,3,0,13,-60,-31,2">
          <action box="1,0,15,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="122,79,15,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="Wait1">
        <documentation>/**
 * @brief   Small timeout to make sure that retries don't overwhelm the logging 
 * system.
 * 
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
        <entry>QTimeEvt_rearm(                                       /* Re-arm timer on entry */
    &amp;me-&gt;dbTimerEvt,
    SEC_TO_TICKS( LL_MAX_TIME_SEC_BETWEEN_RETRIES )
);
</entry>
        <tran trig="DB_ACCESS_TIMEOUT" target="../../6">
         <tran_glyph conn="67,73,3,0,14,-42,-26,2">
          <action box="1,0,15,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="67,69,15,7">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="39,14,99,76">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="37,8,102,112">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="3,3,137,121">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="142,126"/>
   </statechart>
  </class>
  <attribute name="AO_SysMgr" type="QActive * const" visibility="0x00" properties="0x00">
   <documentation>/**&lt; &quot;opaque&quot; pointer to the Active Object */</documentation>
  </attribute>
  <operation name="SysMgr_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief C &quot;constructor&quot; for SysMgr &quot;class&quot;.
 * Initializes all the timers and queues used by the AO and sets of the
 * first state.
 * @param  None
 * @param  None
 * @retval None
 */</documentation>
   <code>SysMgr *me = &amp;l_SysMgr;
QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;SysMgr_initial);

/* Initialize the deferred event queue and storage for it */
QEQueue_init(
    &amp;me-&gt;deferredEvtQueue,
    (QEvt const **)( me-&gt;deferredEvtQSto ),
    Q_DIM(me-&gt;deferredEvtQSto)
);

QTimeEvt_ctor( &amp;me-&gt;sysTimerEvt, SYS_MGR_TIMEOUT_SIG );
QTimeEvt_ctor( &amp;me-&gt;dbTimerEvt, DB_ACCESS_TIMEOUT_SIG );</code>
  </operation>
 </package>
 <directory name=".">
  <file name="SysMgr_gen.c">
   <text>/**
 * @file    SysMgr.c
 * Declarations for functions for the SysMgr AO.  This state
 * machine handles various system level requests.
 *
 * Note: If editing this file, please make sure to update the SysMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    05/13/2015
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2015 Datacard. All rights reserved.
 *
 * @addtogroup groupSys
 * @{
 */

/* Includes ------------------------------------------------------------------*/
#include &quot;SysMgr.h&quot;
#include &quot;project_includes.h&quot;           /* Includes common to entire project. */
#include &quot;bsp_defs.h&quot;     /* For seconds to bsp tick conversion (SEC_TO_TICK) */
#include &quot;I2C1DevMgr.h&quot;                         /* For accessing I2C1 devices */
#include &quot;Shared.h&quot;
#include &quot;i2c_dev.h&quot;
#include &quot;version.h&quot;
#if CPLR_APP
#include &quot;cplr.h&quot;
#elif CPLR_BOOT

#else
    #error &quot;Invalid build.  CPLR_APP or CPLR_BOOT must be specified&quot;
#endif

/* Compile-time called macros ------------------------------------------------*/
Q_DEFINE_THIS_FILE;                 /* For QSPY to know the name of this file */
DBG_DEFINE_THIS_MODULE( DBG_MODL_SYS ); /* For debug system to ID this module */

/* Private typedefs ----------------------------------------------------------*/
$declare(AOs::SysMgr)

/* Private defines -----------------------------------------------------------*/
#define MAX_RETRIES     5       /**&lt; Max number of times to retry operations. */
/* Private macros ------------------------------------------------------------*/
/* Private variables and Local objects ---------------------------------------*/
static SysMgr l_SysMgr;          /* the single instance of the Active object */

/* Global-scope objects ------------------------------------------------------*/
QActive * const AO_SysMgr = (QActive *)&amp;l_SysMgr;      /* &quot;opaque&quot; AO pointer */

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
$define(AOs::SysMgr_ctor)

$define(AOs::SysMgr)

/**
 * @} end addtogroup groupSys
 */

/******** Copyright (C) 2015 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
  <file name="SysMgr_gen.h">
   <text>/**
 * @file    SysMgr.h
 * Declarations for functions for the SysMgr AO.  This state
 * machine handles various system level requests.
 *
 * Note: If editing this file, please make sure to update the SysMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    05/13/2015
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2015 Datacard. All rights reserved.
 *
 * @addtogroup groupSys
 * @{
 */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef SYSMGR_H_
#define SYSMGR_H_

/* Includes ------------------------------------------------------------------*/
#include &quot;qp_port.h&quot;                                        /* for QP support */
#include &quot;CBCommApi.h&quot;               /* For API for communicating with client */
#include &quot;CBSignals.h&quot;              /* For QP signals available to the system */
#include &quot;db.h&quot;                                    /* For DB access and types */

/* Exported defines ----------------------------------------------------------*/
/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
$declare(Events)

/* Exported constants --------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
$declare(AOs::SysMgr_ctor)

$declare(AOs::AO_SysMgr)

/**
 * @} end addtogroup groupSys
 */

#endif                                                           /* SYSMGR_H_ */
/******** Copyright (C) 2015 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
 </directory>
</model>
