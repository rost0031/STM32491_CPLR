<?xml version="1.0" encoding="UTF-8"?>
<model version="3.2.2">
 <documentation>/**
 * CommStackMgr Active Object which.  This AO handles all communications work.
 */</documentation>
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="DBReadReqEvt" superclass="qpc::QEvt">
   <documentation>/**
 * @brief Event struct type for specifying a DB read request.
 */</documentation>
   <attribute name="accessType" type="DC3AccessType_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Specifies whether the request came from FreeRTOS thread or another AO */</documentation>
   </attribute>
   <attribute name="dbElem" type="DC3DBElem_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; DB element */</documentation>
   </attribute>
  </class>
  <class name="DBWriteReqEvt" superclass="qpc::QEvt">
   <documentation>/**
 * @brief Event struct type for specifying a DB read request.
 */</documentation>
   <attribute name="accessType" type="DC3AccessType_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Specifies whether the request came from FreeRTOS thread or another AO */</documentation>
   </attribute>
   <attribute name="dbElem" type="DC3DBElem_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; DB element */</documentation>
   </attribute>
   <attribute name="dataBuf[MAX_DB_ELEM_SIZE]" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Buffer that holds the data to write */</documentation>
   </attribute>
   <attribute name="dataLen" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Length of data in dataBuf */</documentation>
   </attribute>
  </class>
  <class name="DBReadDoneEvt" superclass="qpc::QEvt">
   <documentation>/**
 * @brief Event struct type for specifying a DB read request.
 */</documentation>
   <attribute name="dbElem" type="DC3DBElem_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; DB element */</documentation>
   </attribute>
   <attribute name="dataBuf[MAX_DB_ELEM_SIZE]" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Buffer that holds the data read from DB */</documentation>
   </attribute>
   <attribute name="dataLen" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Length of data in dataBuf */</documentation>
   </attribute>
   <attribute name="status" type="DC3Error_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Status of the operation */</documentation>
   </attribute>
  </class>
  <class name="DBWriteDoneEvt" superclass="qpc::QEvt">
   <documentation>/**
 * @brief Event struct type for specifying a DB read request.
 */</documentation>
   <attribute name="dbElem" type="DC3DBElem_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; DB element */</documentation>
   </attribute>
   <attribute name="status" type="DC3Error_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Status of the operation */</documentation>
   </attribute>
  </class>
  <class name="DBCheckSetElemEvt" superclass="qpc::QEvt">
   <documentation>/**
 * @brief Event struct type for specifying a DB read, check, and possibly 
 * set new value event
 */</documentation>
   <attribute name="dbElem" type="DC3DBElem_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; DB element */</documentation>
   </attribute>
  </class>
 </package>
 <package name="AOs" stereotype="0x02">
  <class name="SysMgr" superclass="qpc::QActive">
   <documentation>/**
 * \brief SysMgr &quot;class&quot;
 */</documentation>
   <attribute name="errorCode" type="DC3Error_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Keep track of errors that may occur in the AO */</documentation>
   </attribute>
   <attribute name="deferredEvtQueue" type="QEQueue" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Native QF queue for deferred request events. */</documentation>
   </attribute>
   <attribute name="deferredEvtQSto[20]" type="QTimeEvt const *" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Storage for deferred event queue. */</documentation>
   </attribute>
   <attribute name="sysTimerEvt" type="QTimeEvt" visibility="0x01" properties="0x00">
    <documentation>/**&lt; QPC timer Used to timeout overall SysMgr interactions. */</documentation>
   </attribute>
   <attribute name="dbTimerEvt" type="QTimeEvt" visibility="0x01" properties="0x00">
    <documentation>/**&lt; QPC timer Used to timeout DB accesses. */</documentation>
   </attribute>
   <attribute name="accessType" type="DC3AccessType_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Access type of current request (used for DB access) */</documentation>
   </attribute>
   <attribute name="dbCmd" type="DB_Operation_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; DB command of current request (used for DB access to guarantee a reply) */</documentation>
   </attribute>
   <attribute name="dataBuf[MAX_DB_ELEM_SIZE]" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Buffer that holds the data for read results from any device we have to wait for */</documentation>
   </attribute>
   <attribute name="dataLen" type="uint16_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Length of data in dataBuf */</documentation>
   </attribute>
   <attribute name="dbElem" type="DC3DBElem_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; DB element to get or set with the current request (used for DB access to guarantee a reply) */</documentation>
   </attribute>
   <attribute name="isDBValid" type="bool" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Flag that keeps track of whether DB is valid.  Starts out false but gets set to
 * true after checking. */</documentation>
   </attribute>
   <attribute name="currRetry" type="uint8_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Current retry number. Used throughout the state machine to make sure we don't 
 * get stuck in an inf loop when retrying */</documentation>
   </attribute>
   <attribute name="dbVersionDef" type="uint16_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Compiled in version of the DB. This is set only once at the beginning and used for
 * verification and validation of the DB on startup */</documentation>
   </attribute>
   <attribute name="dbMagicWordDef" type="uint32_t" visibility="0x01" properties="0x00">
    <documentation>/**&lt; Compiled in magic word that specifies if the DB is intact. This is set only once
 * at the beginning and used for verification and validation of the DB on startup */</documentation>
   </attribute>
   <statechart>
    <initial target="../1/0">
     <action>(void)e;        /* suppress the compiler warning about unused parameter */

QS_OBJ_DICTIONARY(&amp;l_CommMgr);
QS_FUN_DICTIONARY(&amp;QHsm_top);
QS_FUN_DICTIONARY(&amp;CommMgr_initial);
QS_FUN_DICTIONARY(&amp;CommMgr_Active);

/* Subscribe to I2C read and write done signals since it will be publishing them */
QActive_subscribe((QActive *)me, I2C1_DEV_READ_DONE_SIG);
QActive_subscribe((QActive *)me, I2C1_DEV_WRITE_DONE_SIG);
QActive_subscribe((QActive *)me, DB_GET_ELEM_SIG);
QActive_subscribe((QActive *)me, DB_SET_ELEM_SIG);
QActive_subscribe((QActive *)me, DB_FULL_RESET_SIG);

me-&gt;isDBValid = false;
me-&gt;dbVersionDef = DB_VERSION_DEF;
me-&gt;dbMagicWordDef = DB_MAGIC_WORD_DEF;

/* Post to self to validate DB on startup */
DBCheckSetElemEvt *evt;
#if CPLR_BOOT
evt = Q_NEW(DBCheckSetElemEvt, DB_INTRNL_CHK_ELEM_SIG);
evt-&gt;dbElem = _DC3_DB_MAGIC_WORD;
QACTIVE_POST(AO_SysMgr, (QEvt *)evt, me);

evt = Q_NEW(DBCheckSetElemEvt, DB_INTRNL_CHK_ELEM_SIG);
evt-&gt;dbElem = _DC3_DB_VERSION;
QACTIVE_POST(AO_SysMgr, (QEvt *)evt, me);

evt = Q_NEW(DBCheckSetElemEvt, DB_INTRNL_CHK_ELEM_SIG);
evt-&gt;dbElem = _DC3_DB_BOOT_BUILD_DATETIME;
QACTIVE_POST(AO_SysMgr, (QEvt *)evt, me);

evt = Q_NEW(DBCheckSetElemEvt, DB_INTRNL_CHK_ELEM_SIG);
evt-&gt;dbElem = _DC3_DB_BOOT_MAJ;
QACTIVE_POST(AO_SysMgr, (QEvt *)evt, me);

evt = Q_NEW(DBCheckSetElemEvt, DB_INTRNL_CHK_ELEM_SIG);
evt-&gt;dbElem = _DC3_DB_BOOT_MIN;
QACTIVE_POST(AO_SysMgr, (QEvt *)evt, me);
#endif

evt = Q_NEW(DBCheckSetElemEvt, DB_INTRNL_CHK_ELEM_SIG);
evt-&gt;dbElem = _DC3_DB_DBG_MODULES;
QACTIVE_POST(AO_SysMgr, (QEvt *)evt, me);

evt = Q_NEW(DBCheckSetElemEvt, DB_INTRNL_CHK_ELEM_SIG);
evt-&gt;dbElem = _DC3_DB_DBG_DEVICES;
QACTIVE_POST(AO_SysMgr, (QEvt *)evt, me);
</action>
     <initial_glyph conn="1,2,4,3,9,5">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="Active">
     <documentation>/**
 * This state is a catch-all Active state.  If any signals need
 * to be handled that do not cause state transitions and are
 * common to the entire AO, they should be handled here.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
     <entry>/* Post and disarm all the timer events so they can be rearmed at any time */
QTimeEvt_postIn(
    &amp;me-&gt;sysTimerEvt,
    (QActive *)me,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_SYS_MGR )
);
QTimeEvt_disarm(&amp;me-&gt;sysTimerEvt);

QTimeEvt_postIn(
    &amp;me-&gt;dbTimerEvt,
    (QActive *)me,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_SYS_MGR )
);
QTimeEvt_disarm(&amp;me-&gt;dbTimerEvt);</entry>
     <state name="Idle">
      <documentation>/**
 * @brief	Idle state that allows new messages to be received.
 * The Idle state allows for handling of new incoming msgs. Msgs in other states
 * will be either deferred or ignored.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
      <entry>/* Clear out all the variables on entry to Idle state.  By this point, any error
 * feedback should have already happened. */
me-&gt;errorCode       = ERR_NONE;
me-&gt;accessType      = _DC3_ACCESS_NONE;
me-&gt;dbCmd           = DB_OP_NONE;
me-&gt;dataLen         = 0;
me-&gt;currRetry       = 0;
me-&gt;dbElem          = _DC3_DB_MAX_ELEM;
memset(me-&gt;dataBuf, 0, sizeof(me-&gt;dataBuf));

/* recall the request from the private requestQueue */
QActive_recall(
    (QActive *)me,
    &amp;me-&gt;deferredEvtQueue
);
</entry>
      <tran trig="DB_GET_ELEM" target="../../1/2">
       <action>DBG_printf(&quot;DB_GET_ELEM, posting DB_READ\n&quot;);

me-&gt;dbElem = ((DBReadReqEvt const *)e)-&gt;dbElem;
me-&gt;dbCmd = DB_OP_READ;
me-&gt;accessType = ((DBReadReqEvt const *)e)-&gt;accessType;

/* Change the signal associated with event and re post to self so it gets handled
 * in the AccessingDB state without having to recopy all the data in the event. */
((DBReadReqEvt *)e)-&gt;super.sig = DB_READ_SIG;
QACTIVE_POST(AO_SysMgr, (QEvt *)e, me);</action>
       <tran_glyph conn="6,18,3,3,33">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DB_SET_ELEM" target="../../1/2">
       <action>DBG_printf(&quot;DB_SET_ELEM, posting DB_WRITE\n&quot;);

me-&gt;dbElem = ((DBWriteReqEvt const *)e)-&gt;dbElem;
me-&gt;dbCmd = DB_OP_WRITE;
me-&gt;accessType = ((DBWriteReqEvt const *)e)-&gt;accessType;

/* Change the signal associated with event and re post to self so it gets handled
 * in the AccessingDB state without having to recopy all the data in the event. */
((DBWriteReqEvt *)e)-&gt;super.sig = DB_WRITE_SIG;
QACTIVE_POST(AO_SysMgr, (QEvt *)e, me);</action>
       <tran_glyph conn="6,21,3,3,33">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DB_FULL_RESET" target="../../1/2/7">
       <action>/* Need to set some DB element since the reply carries this back.  This is technically
 * the first and most important field being written so this seems like a safe choice.
 * Realistically, the reply shouldn't even include this info so it technically doesn't
 * matter. */
me-&gt;dbElem = _DC3_DB_MAGIC_WORD;
me-&gt;dbCmd = DB_OP_WRITE;
me-&gt;accessType = _DC3_ACCESS_QPC;
</action>
       <tran_glyph conn="6,54,3,3,38">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DB_INTRNL_FULL_RESET" target="../../1/2/7">
       <action>/* Need to set some DB element since the reply carries this back.  This is technically
 * the first and most important field being written so this seems like a safe choice.
 * Realistically, the reply shouldn't even include this info so it technically doesn't
 * matter. */
me-&gt;dbElem = _DC3_DB_MAGIC_WORD;
me-&gt;dbCmd = DB_OP_INTERNAL;
me-&gt;accessType = _DC3_ACCESS_QPC;</action>
       <tran_glyph conn="6,51,3,3,38">
        <action box="0,-2,19,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DB_INTRNL_CHK_ELEM" target="../../1/2/8">
       <action>me-&gt;dbElem = ((DBCheckSetElemEvt const *)e)-&gt;dbElem;
me-&gt;dbCmd = DB_OP_INTERNAL;
me-&gt;accessType = _DC3_ACCESS_QPC;</action>
       <tran_glyph conn="6,37,3,3,38">
        <action box="0,-2,16,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="6,8,14,113">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="Busy">
      <documentation>/**
 * @brief	Busy state for msg processing.
 * This state handles msg processing and indicates that the system is busy and
 * cannot process another msg at this time.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
      <entry>/* Arm the timer so if the message can't be processed for some reason, we can get
 * back to idle state.  This timer may be re-armed if some messages require more 
 * time to process than others. */
QTimeEvt_rearm(
    &amp;me-&gt;sysTimerEvt,
    SEC_TO_TICKS( LL_MAX_TOUT_SEC_DB_ACCESS )
);
</entry>
      <exit>QTimeEvt_disarm(&amp;me-&gt;sysTimerEvt);                 /* Disarm timer on exit */
</exit>
      <tran trig="SYS_MGR_TIMEOUT" target="../../0">
       <tran_glyph conn="37,13,3,1,-17">
        <action box="-15,-2,14,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DB_SET_ELEM, DB_GET_ELEM, DB_INTRNL_CHK_ELEM">
       <action>if (QEQueue_getNFree(&amp;me-&gt;deferredEvtQueue) &gt; 0) {
   /* defer the request - this event will be handled
    * when the state machine goes back to Idle state */
   QActive_defer((QActive *)me, &amp;me-&gt;deferredEvtQueue, e);
} else {
   /* notify the request sender that the request was ignored.. */
   ERR_printf(&quot;Unable to defer DB request\n&quot;);
}</action>
       <tran_glyph conn="37,116,3,-1,34">
        <action box="2,-6,16,6"/>
       </tran_glyph>
      </tran>
      <state name="AccessingDB">
       <documentation>/**
 * @brief    State that waits for DB access to complete.
 * This state handles DB access requests and indicates that the system is busy and
 * cannot process another msg at this time.  It is also used to timeout requests that
 * may have hung.
 *
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
       <entry>/* Set the error code in case of timeout */
me-&gt;errorCode = ERR_DB_ACCESS_TIMEOUT;

/* Arm the timer so if DB access is broken, the system can properly return an error */
QTimeEvt_rearm(
    &amp;me-&gt;dbTimerEvt,
    SEC_TO_TICKS( LL_MAX_TOUT_SEC_DB_ACCESS )
);

DBG_printf(&quot;Starting %s access DB elem %s (%d) via %s\n&quot;,
    CON_dbOpToStr(me-&gt;dbCmd),
    CON_dbElemToStr( me-&gt;dbElem ),
    me-&gt;dbElem,
    CON_accessToStr( me-&gt;accessType )
);</entry>
       <exit>QTimeEvt_disarm(&amp;me-&gt;dbTimerEvt);                 /* Disarm timer on exit */

DBG_printf(&quot;Finished %s access DB elem %s (%d) via %s\n&quot;,
    CON_dbOpToStr(me-&gt;dbCmd),
    CON_dbElemToStr( me-&gt;dbElem ),
    me-&gt;dbElem,
    CON_accessToStr( me-&gt;accessType )
);

if ( me-&gt;dbCmd == DB_OP_READ ) {
    DBReadDoneEvt *evt = Q_NEW(DBReadDoneEvt, DB_GET_ELEM_DONE_SIG);
    evt-&gt;status = me-&gt;errorCode;
    evt-&gt;dbElem  = me-&gt;dbElem;
    evt-&gt;dataLen = me-&gt;dataLen;
    MEMCPY(evt-&gt;dataBuf, me-&gt;dataBuf, evt-&gt;dataLen);
    DBG_printf(&quot;Publishing DB_GET_ELEM_DONE_SIG with %d len and error 0x%08x\n&quot;,evt-&gt;dataLen, evt-&gt;status);

    if ( _DC3_ACCESS_FRT == me-&gt;accessType ) {
#if CPLR_APP
        /* Post directly to the &quot;raw&quot; queue for FreeRTOS task to read */
        QEQueue_postFIFO(&amp;CPLR_evtQueue, (QEvt *)evt);
        vTaskResume( xHandle_CPLR );
#elif CPLR_BOOT
        /* Publish the event so other AOs can get it if they want */
        QF_PUBLISH((QEvt *)evt, AO_SysMgr);
#else
    #error &quot;Invalid build.  CPLR_APP or CPLR_BOOT must be specified&quot;
#endif

    } else {
        /* Publish the event so other AOs can get it if they want */
        QF_PUBLISH((QEvt *)evt, AO_SysMgr);
    }

} else if ( me-&gt;dbCmd == DB_OP_WRITE ) {
    DBWriteDoneEvt *evt = Q_NEW(DBWriteDoneEvt, DB_SET_ELEM_DONE_SIG);
    evt-&gt;status = me-&gt;errorCode;
    evt-&gt;dbElem  = me-&gt;dbElem;

    if ( _DC3_ACCESS_FRT == me-&gt;accessType ) {
#if CPLR_APP
        /* Post directly to the &quot;raw&quot; queue for FreeRTOS task to read */
        QEQueue_postFIFO(&amp;CPLR_evtQueue, (QEvt *)evt);
        vTaskResume( xHandle_CPLR );
#elif CPLR_BOOT
        /* Publish the event so other AOs can get it if they want */
        QF_PUBLISH((QEvt *)evt, AO_SysMgr);
#else
    #error &quot;Invalid build.  CPLR_APP or CPLR_BOOT must be specified&quot;
#endif

    } else {
        /* Publish the event so other AOs can get it if they want */
        QF_PUBLISH((QEvt *)evt, AO_SysMgr);
    }
} else if ( me-&gt;dbCmd == DB_OP_INTERNAL ) {
    /* Do nothing in this case.  Internal operations are for DB
     * validation and similar actions and are initiated intenally so
     * so nobody is expecting a response */
    if ( ERR_NONE != me-&gt;errorCode ) {
        ERR_printf(&quot;Internal DB op failed with error code: 0x%08x\n&quot;, me-&gt;errorCode);
    }
} else {
    me-&gt;errorCode = ERR_DB_OPERATION_REQUESTED;
    ERR_printf(&quot;Invalid DB operation (%d) specified somehow\n&quot;, me-&gt;dbCmd);
    DBWriteDoneEvt *evt = Q_NEW(DBWriteDoneEvt, DB_ERROR_SIG);
    evt-&gt;status = me-&gt;errorCode;
    evt-&gt;dbElem  = me-&gt;dbElem;

    if ( _DC3_ACCESS_FRT == me-&gt;accessType ) {
#if CPLR_APP
        /* Post directly to the &quot;raw&quot; queue for FreeRTOS task to read */
        QEQueue_postFIFO(&amp;CPLR_evtQueue, (QEvt *)evt);
        vTaskResume( xHandle_CPLR );
#elif CPLR_BOOT
        /* Publish the event so other AOs can get it if they want */
        QF_PUBLISH((QEvt *)evt, AO_SysMgr);
#else
    #error &quot;Invalid build.  CPLR_APP or CPLR_BOOT must be specified&quot;
#endif
    } else {
        /* Publish the event so other AOs can get it if they want */
        QF_PUBLISH((QEvt *)evt, AO_SysMgr);
    }
}

/* This will only print if me-&gt;errorCode is not ERR_NONE */
ERR_COND_OUTPUT( me-&gt;errorCode, me-&gt;accessType,
    &quot;FAILED %s (%d) operation on DB elem %s via %s: Error 0x%08x\n&quot;,
    CON_dbOpToStr(me-&gt;dbCmd), me-&gt;dbCmd, CON_dbElemToStr( me-&gt;dbElem ),
    CON_accessToStr(me-&gt;accessType),  me-&gt;errorCode );</exit>
       <tran trig="DB_ACCESS_TIMEOUT" target="../../../0">
        <tran_glyph conn="39,31,3,1,-19">
         <action box="-17,-2,15,2"/>
        </tran_glyph>
       </tran>
       <tran trig="DB_READ">
        <action>/* This is a common function that will do a proper read based on access type and
 * element.  Arguments for buffer size and buffer can be 0 and NULL, respectively
 * since the function will post an event to do the read and it allocates its own
 * buffer space.  Once the read is complete, an event will be posted that signifies
 * the competion of the read and the data will be contained within those events.
 * See I2C1_DEV_READ/WRITE_DONE_SIG and DB_FLASH_READ_DONE_SIG handlers. */
me-&gt;errorCode = DB_getElem(
    ((DBReadReqEvt const *)e)-&gt;dbElem,        // What element to read
    ((DBReadReqEvt const *)e)-&gt;accessType,    // What access to use
    0, NULL                                   // buffer size and pointer
);

/* This will only print out if me-&gt;errorCode is not ERR_NONE */
ERR_COND_OUTPUT(
    me-&gt;errorCode,
    me-&gt;accessType,
    &quot;%s access of DB elem %s (%d) via %s: Error 0x%08x\n&quot;,
    CON_dbOpToStr(me-&gt;dbCmd),
    CON_dbElemToStr( me-&gt;dbElem ),
    me-&gt;dbElem,
    CON_accessToStr( me-&gt;accessType),
    me-&gt;errorCode
);</action>
        <tran_glyph conn="39,24,3,-1,12">
         <action box="0,-2,8,2"/>
        </tran_glyph>
       </tran>
       <tran trig="DB_OP_DONE" target="../../../0">
        <tran_glyph conn="39,28,3,1,-19">
         <action box="-13,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="DB_WRITE">
        <action>/* This is a common function that will do a proper read based on access type and
 * element.  Arguments for buffer size and buffer can be 0 and NULL, respectively
 * since the function will post an event to do the read and it allocates its own
 * buffer space.  Once the read is complete, an event will be posted that signifies
 * the competion of the read and the data will be contained within those events.
 * See I2C1_DEV_READ/WRITE_DONE_SIG and DB_FLASH_READ_DONE_SIG handlers. */
me-&gt;errorCode = DB_setElem(
    ((DBWriteReqEvt const *)e)-&gt;dbElem,         // Element to write
    ((DBWriteReqEvt const *)e)-&gt;accessType,     // Access type to use
    MAX_DB_ELEM_SIZE,                           // Max size of buffer
    ((DBWriteReqEvt const *)e)-&gt;dataBuf         // Buffer containing data to write
);

/* This will only print out if me-&gt;errorCode is not ERR_NONE */
ERR_COND_OUTPUT(
    me-&gt;errorCode,
    me-&gt;accessType,
    &quot;%s access of DB elem %s (%d) via %s: Error 0x%08x\n&quot;,
    CON_dbOpToStr(me-&gt;dbCmd),
    CON_dbElemToStr( me-&gt;dbElem ),
    me-&gt;dbElem,
    CON_accessToStr( me-&gt;accessType),
    me-&gt;errorCode
);</action>
        <tran_glyph conn="39,27,3,-1,12">
         <action box="0,-2,8,2"/>
        </tran_glyph>
       </tran>
       <tran trig="I2C1_DEV_READ_DONE">
        <action>me-&gt;errorCode = ((I2CReadDoneEvt const *) e)-&gt;status;
if ( ERR_NONE == me-&gt;errorCode ) {
    me-&gt;dataLen = ((I2CReadDoneEvt const *) e)-&gt;bytes;
    if ( me-&gt;dataLen &gt; MAX_DB_ELEM_SIZE ) {
        me-&gt;errorCode = ERR_DB_ELEM_SIZE_OVERFLOW;
    } else {
        MEMCPY(me-&gt;dataBuf, ((I2CReadDoneEvt const *) e)-&gt;dataBuf, me-&gt;dataLen);
    }
}

/* Self post to let the exit condition handle the sending back to requester */
QEvt *evt = Q_NEW(QEvt, DB_OP_DONE_SIG);
QACTIVE_POST(AO_SysMgr, evt, me);</action>
        <tran_glyph conn="138,18,1,-1,-23">
         <action box="-20,-2,18,2"/>
        </tran_glyph>
       </tran>
       <tran trig="I2C1_DEV_WRITE_DONE">
        <action>me-&gt;errorCode = ((I2CWriteDoneEvt const *) e)-&gt;status;

/* Self post to let the exit condition handle the sending back to requester */
QEvt *evt = Q_NEW(QEvt, DB_OP_DONE_SIG);
QACTIVE_POST(AO_SysMgr, evt, me);</action>
        <tran_glyph conn="138,21,1,-1,-23">
         <action box="-20,-2,18,2"/>
        </tran_glyph>
       </tran>
       <tran trig="DB_FLASH_READ_DONE">
        <action>me-&gt;errorCode = ((DBReadDoneEvt const *) e)-&gt;status;
if ( ERR_NONE == me-&gt;errorCode ) {
    me-&gt;dataLen = ((DBReadDoneEvt const *) e)-&gt;dataLen;
    if ( me-&gt;dataLen &gt; MAX_DB_ELEM_SIZE ) {
        me-&gt;errorCode = ERR_DB_ELEM_SIZE_OVERFLOW;
    } else {
        MEMCPY(me-&gt;dataBuf, ((DBReadDoneEvt const *) e)-&gt;dataBuf, me-&gt;dataLen);
    }
}

/* Self post to let the exit condition handle the sending back to requester */
QEvt *evt = Q_NEW(QEvt, DB_OP_DONE_SIG);
QACTIVE_POST(AO_SysMgr, evt, me);</action>
        <tran_glyph conn="138,24,1,-1,-23">
         <action box="-20,-2,17,2"/>
        </tran_glyph>
       </tran>
       <state name="DBFullReset">
        <entry>QTimeEvt_rearm(                                       /* Re-arm timer on entry */
    &amp;me-&gt;dbTimerEvt,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_COMM_DB_VALIDATE )
);


/* This function will fill out the appropriate data and post the event to reset the DB */
me-&gt;errorCode = DB_initToDefault( me-&gt;accessType );</entry>
        <exit>QTimeEvt_disarm(&amp;me-&gt;dbTimerEvt);                  /* Disarm timer on exit */</exit>
        <state_glyph node="44,49,15,7">
         <entry box="1,2,6,2"/>
         <exit box="1,4,6,2"/>
        </state_glyph>
       </state>
       <state name="DBCheckAndSetElem">
        <documentation>/**
 * @brief    Check DB element and set it if not properly set.
 * 
 * @param  [in|out] me: Pointer to the state machine
 * @param  [in|out]  e:  Pointer to the event being processed.
 * @return status: QState type that specifies where the state
 * machine is going next.
 */</documentation>
        <entry>QTimeEvt_rearm(                                       /* Re-arm timer on entry */
    &amp;me-&gt;dbTimerEvt,
    SEC_TO_TICKS( HL_MAX_TOUT_SEC_COMM_DB_VALIDATE )
);

/* This function will post the event to read the element.  Don't need a buffer
 * since the data will come back via an event with its own buffer. */
me-&gt;errorCode = DB_getElem( me-&gt;dbElem, me-&gt;accessType, 0, NULL );</entry>
        <exit>QTimeEvt_disarm(&amp;me-&gt;dbTimerEvt);                  /* Disarm timer on exit */</exit>
        <tran trig="I2C1_DEV_READ_DONE">
         <action>/* Whie DB reads could certainly involve reading from sources other than EEPROM,
 * it's only worth checking the RW sources since they are the only ones that could
 * become corrupted. Hence, only I2c1_DEV_READ_DONE signal is being checked. */

me-&gt;errorCode = ((I2CReadDoneEvt const *) e)-&gt;status;

if ( ERR_NONE != me-&gt;errorCode ) {
    goto END_ERROR_CHECK;
}

/* This function will compare the passed in value of the element to the compiled 
 * default and report back via error code. */
me-&gt;errorCode = DB_chkElem(
    me-&gt;dbElem,
    me-&gt;accessType,
    ((I2CReadDoneEvt const *) e)-&gt;bytes,
    ((I2CReadDoneEvt const *) e)-&gt;dataBuf
);

/* Local tag to jump to if an error is found or to reach naturally 
 * once all the checks are complete */
END_ERROR_CHECK:
WRN_COND_OUTPUT(
    me-&gt;errorCode,
    me-&gt;accessType,
    &quot;Checking DB elem %s (%d): Error 0x%08x \n&quot;,
    me-&gt;errorCode,
    CON_dbElemToStr( me-&gt;dbElem ),
    me-&gt;dbElem
);</action>
         <choice target="../../../../../0">
          <guard brief="NoError?">ERR_NONE == me-&gt;errorCode</guard>
          <choice_glyph conn="63,41,4,1,2,-43">
           <action box="-7,2,7,2"/>
          </choice_glyph>
         </choice>
         <choice>
          <guard>else</guard>
          <action>switch( me-&gt;errorCode ) {

    case ERR_DB_VER_MISMATCH:   /* Intentionally fall though */
        /* For now, handle DB version mismatch simply.  Later,
         * if multiple versions of DB come into existence, this
         * case will have to be handled differently. */
    case ERR_DB_CHK_ELEM_NEEDS_RESET: {
        /* Get the default value that needs to be set */
        me-&gt;errorCode = DB_getEepromDefaultElem(
            me-&gt;dbElem, me-&gt;accessType, MAX_DB_ELEM_SIZE, me-&gt;dataBuf );
        if ( ERR_NONE == me-&gt;errorCode ) {
            /* If no errors, write the default to EEPROM */
            DB_setElem( me-&gt;dbElem, me-&gt;accessType,
                DB_getElemSize(me-&gt;dbElem), me-&gt;dataBuf );
        }
        break;
    }
    case ERR_DB_CHK_DBG_MODULES_MISMATCH: {
        uint32_t dbgModules = 0;
        MEMCPY(
            (uint8_t *)&amp;dbgModules,
            ((I2CReadDoneEvt const *) e)-&gt;dataBuf,
            DB_getElemSize(me-&gt;dbElem)
        );
        DBG_SET_DEBUG_FOR_ALL_MODULES( dbgModules );

        /* Self post to get back to Idle */
        QEvt *evt = Q_NEW(QEvt, DB_OP_DONE_SIG);
        QACTIVE_POST(AO_SysMgr, evt, me);
        break;
    }
    case ERR_DB_CHK_DBG_DEVICES_MISMATCH: {
        DBG_SET_DEBUG_FOR_ALL_DEVICES( ((I2CReadDoneEvt const *) e)-&gt;dataBuf[0] );
        /* Self post to get back to Idle  */
        QEvt *evt = Q_NEW(QEvt, DB_OP_DONE_SIG);
        QACTIVE_POST(AO_SysMgr, evt, me);
        break;
    }
    case ERR_DB_NOT_INIT: /* Intentionally fall though */
    default:
        /* This function will fill out the appropriate data and
         * post the event to reset the DB */
        me-&gt;errorCode = DB_initToDefault( me-&gt;accessType );
        break;
}</action>
          <choice_glyph conn="63,41,5,-1,6">
           <action box="2,0,5,3"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="44,41,3,-1,19">
          <action box="0,-2,16,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="44,33,29,12">
         <entry box="1,2,6,2"/>
         <exit box="1,4,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="39,14,99,94">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="37,8,102,112">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="3,3,137,121">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="142,126"/>
   </statechart>
  </class>
  <attribute name="AO_SysMgr" type="QActive * const" visibility="0x00" properties="0x00">
   <documentation>/**&lt; &quot;opaque&quot; pointer to the Active Object */</documentation>
  </attribute>
  <operation name="SysMgr_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>/**
 * @brief C &quot;constructor&quot; for SysMgr &quot;class&quot;.
 * Initializes all the timers and queues used by the AO and sets of the
 * first state.
 * @param  None
 * @param  None
 * @retval None
 */</documentation>
   <code>SysMgr *me = &amp;l_SysMgr;
QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;SysMgr_initial);

/* Initialize the deferred event queue and storage for it */
QEQueue_init(
    &amp;me-&gt;deferredEvtQueue,
    (QEvt const **)( me-&gt;deferredEvtQSto ),
    Q_DIM(me-&gt;deferredEvtQSto)
);

QTimeEvt_ctor( &amp;me-&gt;sysTimerEvt, SYS_MGR_TIMEOUT_SIG );
QTimeEvt_ctor( &amp;me-&gt;dbTimerEvt, DB_ACCESS_TIMEOUT_SIG );</code>
  </operation>
 </package>
 <directory name=".">
  <file name="SysMgr_gen.c">
   <text>/**
 * @file    SysMgr.c
 * Declarations for functions for the SysMgr AO.  This state
 * machine handles various system level requests.
 *
 * Note: If editing this file, please make sure to update the SysMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    05/13/2015
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2015 Datacard. All rights reserved.
 *
 * @addtogroup groupSys
 * @{
 */

/* Includes ------------------------------------------------------------------*/
#include &quot;SysMgr.h&quot;
#include &quot;project_includes.h&quot;           /* Includes common to entire project. */
#include &quot;bsp_defs.h&quot;     /* For seconds to bsp tick conversion (SEC_TO_TICK) */
#include &quot;I2C1DevMgr.h&quot;                         /* For accessing I2C1 devices */
#include &quot;Shared.h&quot;
#include &quot;i2c_dev.h&quot;
#include &quot;version.h&quot;
#if CPLR_APP
#include &quot;cplr.h&quot;
#elif CPLR_BOOT

#else
    #error &quot;Invalid build.  CPLR_APP or CPLR_BOOT must be specified&quot;
#endif

/* Compile-time called macros ------------------------------------------------*/
Q_DEFINE_THIS_FILE;                 /* For QSPY to know the name of this file */
DBG_DEFINE_THIS_MODULE( DC3_DBG_MODL_SYS ); /* For debug system to ID this module */

/* Private typedefs ----------------------------------------------------------*/
$declare(AOs::SysMgr)

/* Private defines -----------------------------------------------------------*/
#define MAX_RETRIES     5       /**&lt; Max number of times to retry operations. */
/* Private macros ------------------------------------------------------------*/
/* Private variables and Local objects ---------------------------------------*/
static SysMgr l_SysMgr;          /* the single instance of the Active object */

/* Global-scope objects ------------------------------------------------------*/
QActive * const AO_SysMgr = (QActive *)&amp;l_SysMgr;      /* &quot;opaque&quot; AO pointer */

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
$define(AOs::SysMgr_ctor)

$define(AOs::SysMgr)

/**
 * @} end addtogroup groupSys
 */

/******** Copyright (C) 2015 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
  <file name="SysMgr_gen.h">
   <text>/**
 * @file    SysMgr.h
 * Declarations for functions for the SysMgr AO.  This state
 * machine handles various system level requests.
 *
 * Note: If editing this file, please make sure to update the SysMgr.qm
 * model.  The generated code from that model should be very similar to the
 * code in this file.
 *
 * @date    05/13/2015
 * @author  Harry Rostovtsev
 * @email   harry_rostovtsev@datacard.com
 * Copyright (C) 2015 Datacard. All rights reserved.
 *
 * @addtogroup groupSys
 * @{
 */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef SYSMGR_H_
#define SYSMGR_H_

/* Includes ------------------------------------------------------------------*/
#include &quot;qp_port.h&quot;                                        /* for QP support */
#include &quot;DC3CommApi.h&quot;              /* For API for communicating with client */
#include &quot;DC3Signals.h&quot;             /* For QP signals available to the system */
#include &quot;db.h&quot;                                    /* For DB access and types */

/* Exported defines ----------------------------------------------------------*/
/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
$declare(Events)

/* Exported constants --------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
$declare(AOs::SysMgr_ctor)

$declare(AOs::AO_SysMgr)

/**
 * @} end addtogroup groupSys
 */

#endif                                                           /* SYSMGR_H_ */
/******** Copyright (C) 2015 Datacard. All rights reserved *****END OF FILE****/</text>
  </file>
 </directory>
</model>
