/******************************************************************************* 
 * File generated by Protoc for Embedded C and split by protobuf_lib_splitter.py
 * This file contains only the functionality of protobuf-c so that is specific
 * to the protocol.  It can  be compiled into a separate library from the core 
 * to prevent symbol crashes between multiple different protobuf generated 
 * libraries.
 *                                                   
 * Copyright (c) 2009-2012
 * Technische Universitaet Muenchen
 * http://www4.in.tum.de/
 * Copyright (c) 2013
 * Datacard Group
 *                                                                                                                                  
 * Do not edit.                                                                
 ******************************************************************************/
/******************************************************************* 
 * Header file generated by Protoc for Embedded C.                 *
 * Version 0.2 (2012-01-31)                                        *
 *                                                                 *
 * Copyright (c) 2009-2012                                         *
 * Technische Universitaet Muenchen                                *
 * http://www4.in.tum.de/                                          *
 *                                                                 *
 * Source : CBMsgs.proto
 * Package: 
 *                                                                 *
 * Do not edit.                                                    *
 *******************************************************************/


#define MAX_REPEATED_LEN 127
#define MAX_STRING_LEN 32
#define MAX_BYTES_LEN 112

/*******************************************************************
 * Enumeration: CBMsgs.proto, line 192
 *******************************************************************/
enum CBMsgName {
  _CBNoMsg = 0,
  _CBStatusPayloadMsg = 1,
  _CBGetVersionMsg = 2,
  _CBVersionPayloadMsg = 3,
  _CBGetBootModeMsg = 4,
  _CBSetBootModeMsg = 5,
  _CBBootModePayloadMsg = 6,
  _CBFlashMsg = 7,
  _CBFlashMetaPayloadMsg = 8,
  _CBFlashDataPayloadMsg = 9,
  _CBI2CReadMsg = 10,
  _CBI2CWriteMsg = 11,
  _CBI2CDataPayloadMsg = 12,
  _CBRamTestMsg = 13,
  _CBRamTestPayloadMsg = 14
};

/*******************************************************************
 * Enumeration: CBMsgs.proto, line 264
 *******************************************************************/
enum CBMsgType {
  _CB_NoMsgType = 0,
  _CB_Req = 1,
  _CB_Ack = 2,
  _CB_Prog = 3,
  _CB_Done = 4,
  _CB_MaxMsgType = 5
};

/*******************************************************************
 * Enumeration: CBMsgs.proto, line 286
 *******************************************************************/
enum CBMsgRoute {
  _CB_NoRoute = 0,
  _CB_Serial = 1,
  _CB_EthSys = 2,
  _CB_EthLog = 3,
  _CB_EthCli = 4,
  _CB_MaxRoutes = 5
};

/*******************************************************************
 * Enumeration: CBMsgs.proto, line 315
 *******************************************************************/
enum CBBootMode {
  _CB_NoBootMode = 0,
  _CB_SysRomBoot = 1,
  _CB_Bootloader = 2,
  _CB_Application = 3,
  _CB_MaxBootModes = 4
};

/*******************************************************************
 * Message: CBMsgs.proto, line 377
 *******************************************************************/

/* Maximum size of a serialized CBBasicMsg-message, useful for buffer allocation. */
#define MAX_CBBasicMsg_SIZE 28

/* Structure that holds a deserialized CBBasicMsg-message. */
struct CBBasicMsg {
  enum CBMsgName _msgName;
  enum CBMsgType _msgType;
  enum CBMsgRoute _msgRoute;
  unsigned long _msgID;
  unsigned long _msgReqProg;
  enum CBMsgName _msgPayload;
};
/*
 * Serialize a CBBasicMsg-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int CBBasicMsg_write_delimited_to(struct CBBasicMsg *_CBBasicMsg, void *_buffer, int offset);

/*
 * Serialize a CBBasicMsg-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a CBBasicMsg-message is embedded in another message.
 */
int CBBasicMsg_write_with_tag(struct CBBasicMsg *_CBBasicMsg, void *_buffer, int offset, int tag);

/*
 * Deserialize a CBBasicMsg-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _CBBasicMsg will be reset to 0 before _buffer is interpreted.
 */
int CBBasicMsg_read_delimited_from(void *_buffer, struct CBBasicMsg *_CBBasicMsg, int offset);


/*******************************************************************
 * Message: CBMsgs.proto, line 402
 *******************************************************************/

/* Maximum size of a serialized CBStatusPayloadMsg-message, useful for buffer allocation. */
#define MAX_CBStatusPayloadMsg_SIZE 9

/* Structure that holds a deserialized CBStatusPayloadMsg-message. */
struct CBStatusPayloadMsg {
  unsigned long _errorCode;
};
/*
 * Serialize a CBStatusPayloadMsg-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int CBStatusPayloadMsg_write_delimited_to(struct CBStatusPayloadMsg *_CBStatusPayloadMsg, void *_buffer, int offset);

/*
 * Serialize a CBStatusPayloadMsg-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a CBStatusPayloadMsg-message is embedded in another message.
 */
int CBStatusPayloadMsg_write_with_tag(struct CBStatusPayloadMsg *_CBStatusPayloadMsg, void *_buffer, int offset, int tag);

/*
 * Deserialize a CBStatusPayloadMsg-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _CBStatusPayloadMsg will be reset to 0 before _buffer is interpreted.
 */
int CBStatusPayloadMsg_read_delimited_from(void *_buffer, struct CBStatusPayloadMsg *_CBStatusPayloadMsg, int offset);


/*******************************************************************
 * Message: CBMsgs.proto, line 453
 *******************************************************************/

/* Maximum size of a serialized CBVersionPayloadMsg-message, useful for buffer allocation. */
#define MAX_CBVersionPayloadMsg_SIZE 246

/* Structure that holds a deserialized CBVersionPayloadMsg-message. */
struct CBVersionPayloadMsg {
  unsigned long _errorCode;
  int _fwVerString_len;
  char _fwVerString[MAX_BYTES_LEN];
  int _fwDateString_len;
  char _fwDateString[MAX_BYTES_LEN];
  unsigned long _dbVersion;
};
/*
 * Serialize a CBVersionPayloadMsg-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int CBVersionPayloadMsg_write_delimited_to(struct CBVersionPayloadMsg *_CBVersionPayloadMsg, void *_buffer, int offset);

/*
 * Serialize a CBVersionPayloadMsg-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a CBVersionPayloadMsg-message is embedded in another message.
 */
int CBVersionPayloadMsg_write_with_tag(struct CBVersionPayloadMsg *_CBVersionPayloadMsg, void *_buffer, int offset, int tag);

/*
 * Deserialize a CBVersionPayloadMsg-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _CBVersionPayloadMsg will be reset to 0 before _buffer is interpreted.
 */
int CBVersionPayloadMsg_read_delimited_from(void *_buffer, struct CBVersionPayloadMsg *_CBVersionPayloadMsg, int offset);


/*******************************************************************
 * Message: CBMsgs.proto, line 543
 *******************************************************************/

/* Maximum size of a serialized CBBootModePayloadMsg-message, useful for buffer allocation. */
#define MAX_CBBootModePayloadMsg_SIZE 12

/* Structure that holds a deserialized CBBootModePayloadMsg-message. */
struct CBBootModePayloadMsg {
  unsigned long _errorCode;
  enum CBBootMode _bootMode;
};
/*
 * Serialize a CBBootModePayloadMsg-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int CBBootModePayloadMsg_write_delimited_to(struct CBBootModePayloadMsg *_CBBootModePayloadMsg, void *_buffer, int offset);

/*
 * Serialize a CBBootModePayloadMsg-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a CBBootModePayloadMsg-message is embedded in another message.
 */
int CBBootModePayloadMsg_write_with_tag(struct CBBootModePayloadMsg *_CBBootModePayloadMsg, void *_buffer, int offset, int tag);

/*
 * Deserialize a CBBootModePayloadMsg-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _CBBootModePayloadMsg will be reset to 0 before _buffer is interpreted.
 */
int CBBootModePayloadMsg_read_delimited_from(void *_buffer, struct CBBootModePayloadMsg *_CBBootModePayloadMsg, int offset);


/*******************************************************************
 * Message: CBMsgs.proto, line 659
 *******************************************************************/

/* Maximum size of a serialized CBFlashMetaPayloadMsg-message, useful for buffer allocation. */
#define MAX_CBFlashMetaPayloadMsg_SIZE 82

/* Structure that holds a deserialized CBFlashMetaPayloadMsg-message. */
struct CBFlashMetaPayloadMsg {
  unsigned long _errorCode;
  unsigned long _imageCrc;
  unsigned long _imageSize;
  enum CBBootMode _imageType;
  unsigned long _imageMaj;
  unsigned long _imageMin;
  int _imageDatetime_len;
  char _imageDatetime[MAX_STRING_LEN];
  unsigned long _imageNumPackets;
};
/*
 * Serialize a CBFlashMetaPayloadMsg-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int CBFlashMetaPayloadMsg_write_delimited_to(struct CBFlashMetaPayloadMsg *_CBFlashMetaPayloadMsg, void *_buffer, int offset);

/*
 * Serialize a CBFlashMetaPayloadMsg-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a CBFlashMetaPayloadMsg-message is embedded in another message.
 */
int CBFlashMetaPayloadMsg_write_with_tag(struct CBFlashMetaPayloadMsg *_CBFlashMetaPayloadMsg, void *_buffer, int offset, int tag);

/*
 * Deserialize a CBFlashMetaPayloadMsg-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _CBFlashMetaPayloadMsg will be reset to 0 before _buffer is interpreted.
 */
int CBFlashMetaPayloadMsg_read_delimited_from(void *_buffer, struct CBFlashMetaPayloadMsg *_CBFlashMetaPayloadMsg, int offset);


/*******************************************************************
 * Message: CBMsgs.proto, line 693
 *******************************************************************/

/* Maximum size of a serialized CBFlashDataPayloadMsg-message, useful for buffer allocation. */
#define MAX_CBFlashDataPayloadMsg_SIZE 131

/* Structure that holds a deserialized CBFlashDataPayloadMsg-message. */
struct CBFlashDataPayloadMsg {
  unsigned long _dataCrc;
  int _dataBuf_len;
  char _dataBuf[MAX_BYTES_LEN];
  unsigned long _seqCurr;
};
/*
 * Serialize a CBFlashDataPayloadMsg-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int CBFlashDataPayloadMsg_write_delimited_to(struct CBFlashDataPayloadMsg *_CBFlashDataPayloadMsg, void *_buffer, int offset);

/*
 * Serialize a CBFlashDataPayloadMsg-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a CBFlashDataPayloadMsg-message is embedded in another message.
 */
int CBFlashDataPayloadMsg_write_with_tag(struct CBFlashDataPayloadMsg *_CBFlashDataPayloadMsg, void *_buffer, int offset, int tag);

/*
 * Deserialize a CBFlashDataPayloadMsg-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _CBFlashDataPayloadMsg will be reset to 0 before _buffer is interpreted.
 */
int CBFlashDataPayloadMsg_read_delimited_from(void *_buffer, struct CBFlashDataPayloadMsg *_CBFlashDataPayloadMsg, int offset);


/*******************************************************************
 * Enumeration: CBMsgs.proto, line 781
 *******************************************************************/
enum CBI2CDevices {
  _CB_EEPROM = 0,
  _CB_SNROM = 1,
  _CB_EUIROM = 2,
  _CB_MaxI2CDev = 3
};

/*******************************************************************
 * Enumeration: CBMsgs.proto, line 791
 *******************************************************************/
enum CBAccessType {
  _CB_ACCESS_NONE = 0,
  _CB_ACCESS_BARE = 1,
  _CB_ACCESS_QPC = 2,
  _CB_ACCESS_FRT = 3
};

/*******************************************************************
 * Message: CBMsgs.proto, line 815
 *******************************************************************/

/* Maximum size of a serialized CBI2CDataPayloadMsg-message, useful for buffer allocation. */
#define MAX_CBI2CDataPayloadMsg_SIZE 144

/* Structure that holds a deserialized CBI2CDataPayloadMsg-message. */
struct CBI2CDataPayloadMsg {
  enum CBI2CDevices _i2cDev;
  unsigned long _start;
  unsigned long _nBytes;
  enum CBAccessType _accType;
  unsigned long _errorCode;
  int _dataBuf_len;
  char _dataBuf[MAX_BYTES_LEN];
};
/*
 * Serialize a CBI2CDataPayloadMsg-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int CBI2CDataPayloadMsg_write_delimited_to(struct CBI2CDataPayloadMsg *_CBI2CDataPayloadMsg, void *_buffer, int offset);

/*
 * Serialize a CBI2CDataPayloadMsg-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a CBI2CDataPayloadMsg-message is embedded in another message.
 */
int CBI2CDataPayloadMsg_write_with_tag(struct CBI2CDataPayloadMsg *_CBI2CDataPayloadMsg, void *_buffer, int offset, int tag);

/*
 * Deserialize a CBI2CDataPayloadMsg-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _CBI2CDataPayloadMsg will be reset to 0 before _buffer is interpreted.
 */
int CBI2CDataPayloadMsg_read_delimited_from(void *_buffer, struct CBI2CDataPayloadMsg *_CBI2CDataPayloadMsg, int offset);


/*******************************************************************
 * Enumeration: CBMsgs.proto, line 832
 *******************************************************************/
enum CBRamTest_t {
  _CB_RAM_TEST_NONE = 0,
  _CB_RAM_TEST_DATA_BUS = 1,
  _CB_RAM_TEST_ADDR_BUS = 2,
  _CB_RAM_TEST_DEV_INT = 3,
  _CB_RAM_TEST_MAX = 4
};

/*******************************************************************
 * Message: CBMsgs.proto, line 897
 *******************************************************************/

/* Maximum size of a serialized CBRamTestPayloadMsg-message, useful for buffer allocation. */
#define MAX_CBRamTestPayloadMsg_SIZE 19

/* Structure that holds a deserialized CBRamTestPayloadMsg-message. */
struct CBRamTestPayloadMsg {
  unsigned long _errorCode;
  enum CBRamTest_t _test;
  unsigned long _addr;
};
/*
 * Serialize a CBRamTestPayloadMsg-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int CBRamTestPayloadMsg_write_delimited_to(struct CBRamTestPayloadMsg *_CBRamTestPayloadMsg, void *_buffer, int offset);

/*
 * Serialize a CBRamTestPayloadMsg-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a CBRamTestPayloadMsg-message is embedded in another message.
 */
int CBRamTestPayloadMsg_write_with_tag(struct CBRamTestPayloadMsg *_CBRamTestPayloadMsg, void *_buffer, int offset, int tag);

/*
 * Deserialize a CBRamTestPayloadMsg-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _CBRamTestPayloadMsg will be reset to 0 before _buffer is interpreted.
 */
int CBRamTestPayloadMsg_read_delimited_from(void *_buffer, struct CBRamTestPayloadMsg *_CBRamTestPayloadMsg, int offset);
