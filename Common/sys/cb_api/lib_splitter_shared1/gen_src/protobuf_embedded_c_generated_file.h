/******************************************************************************* 
 * File generated by Protoc for Embedded C and split by protobuf_lib_splitter.py
 * This file contains only the functionality of protobuf-c so that is specific
 * to the protocol.  It can  be compiled into a separate library from the core 
 * to prevent symbol crashes between multiple different protobuf generated 
 * libraries.
 *                                                   
 * Copyright (c) 2009-2012
 * Technische Universitaet Muenchen
 * http://www4.in.tum.de/
 * Copyright (c) 2013
 * Datacard Group
 *                                                                                                                                  
 * Do not edit.                                                                
 ******************************************************************************/
/******************************************************************* 
 * Header file generated by Protoc for Embedded C.                 *
 * Version 0.2 (2012-01-31)                                        *
 *                                                                 *
 * Copyright (c) 2009-2012                                         *
 * Technische Universitaet Muenchen                                *
 * http://www4.in.tum.de/                                          *
 *                                                                 *
 * Source : rfid_board_api.proto
 * Package: 
 *                                                                 *
 * Do not edit.                                                    *
 *******************************************************************/


#define MAX_REPEATED_LEN 127
#define MAX_STRING_LEN 32
#define MAX_BYTES_LEN 112

/*******************************************************************
 * Enumeration: rfid_board_api.proto, line 143
 *******************************************************************/
enum RFIDMsgName {
  _RFIDNoMsg = 0,
  _RFIDBasicMsg = 1,
  _RFIDBasicPayloadMsg = 2,
  _RFIDCommTestMsg = 3,
  _RFIDCommTestPayloadMsg = 4,
  _RFIDSetFieldStateMsg = 5,
  _RFIDGetFieldStateMsg = 6,
  _RFIDFieldStatePayloadMsg = 7
};

/*******************************************************************
 * Enumeration: rfid_board_api.proto, line 169
 *******************************************************************/
enum RFIDMsgType {
  _RFID_Req = 1,
  _RFID_Ack = 2,
  _RFID_Prog = 3,
  _RFID_Done = 4
};

/*******************************************************************
 * Enumeration: rfid_board_api.proto, line 190
 *******************************************************************/
enum RFIDMsgRoute {
  _RFID_HostDevice = 1,
  _RFID_Console = 2,
  _RFID_ExtClient = 3
};

/*******************************************************************
 * Enumeration: rfid_board_api.proto, line 203
 *******************************************************************/
enum RFIDFieldState {
  _RFID_FieldOff = 0,
  _RFID_FieldOnUnAuth = 1,
  _RFID_FieldOnAuth = 2
};

/*******************************************************************
 * Message: rfid_board_api.proto, line 256
 *******************************************************************/

/* Maximum size of a serialized RFIDBasicMsg-message, useful for buffer allocation. */
#define MAX_RFIDBasicMsg_SIZE 21

/* Structure that holds a deserialized RFIDBasicMsg-message. */
struct RFIDBasicMsg {
  enum RFIDMsgName _msgName;
  unsigned long _msgID;
  enum RFIDMsgType _msgType;
  enum RFIDMsgRoute _msgRoute;
  enum RFIDMsgName _msgPayload;
};
/*
 * Serialize a RFIDBasicMsg-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int RFIDBasicMsg_write_delimited_to(struct RFIDBasicMsg *_RFIDBasicMsg, void *_buffer, int offset);

/*
 * Serialize a RFIDBasicMsg-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a RFIDBasicMsg-message is embedded in another message.
 */
int RFIDBasicMsg_write_with_tag(struct RFIDBasicMsg *_RFIDBasicMsg, void *_buffer, int offset, int tag);

/*
 * Deserialize a RFIDBasicMsg-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _RFIDBasicMsg will be reset to 0 before _buffer is interpreted.
 */
int RFIDBasicMsg_read_delimited_from(void *_buffer, struct RFIDBasicMsg *_RFIDBasicMsg, int offset);


/*******************************************************************
 * Message: rfid_board_api.proto, line 280
 *******************************************************************/

/* Maximum size of a serialized RFIDBasicPayloadMsg-message, useful for buffer allocation. */
#define MAX_RFIDBasicPayloadMsg_SIZE 9

/* Structure that holds a deserialized RFIDBasicPayloadMsg-message. */
struct RFIDBasicPayloadMsg {
  unsigned long _errorCode;
};
/*
 * Serialize a RFIDBasicPayloadMsg-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int RFIDBasicPayloadMsg_write_delimited_to(struct RFIDBasicPayloadMsg *_RFIDBasicPayloadMsg, void *_buffer, int offset);

/*
 * Serialize a RFIDBasicPayloadMsg-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a RFIDBasicPayloadMsg-message is embedded in another message.
 */
int RFIDBasicPayloadMsg_write_with_tag(struct RFIDBasicPayloadMsg *_RFIDBasicPayloadMsg, void *_buffer, int offset, int tag);

/*
 * Deserialize a RFIDBasicPayloadMsg-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _RFIDBasicPayloadMsg will be reset to 0 before _buffer is interpreted.
 */
int RFIDBasicPayloadMsg_read_delimited_from(void *_buffer, struct RFIDBasicPayloadMsg *_RFIDBasicPayloadMsg, int offset);


/*******************************************************************
 * Message: rfid_board_api.proto, line 326
 *******************************************************************/

/* Maximum size of a serialized RFIDCommTestPayloadMsg-message, useful for buffer allocation. */
#define MAX_RFIDCommTestPayloadMsg_SIZE 16

/* Structure that holds a deserialized RFIDCommTestPayloadMsg-message. */
struct RFIDCommTestPayloadMsg {
  unsigned long _errorCode;
  unsigned long _payload;
};
/*
 * Serialize a RFIDCommTestPayloadMsg-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int RFIDCommTestPayloadMsg_write_delimited_to(struct RFIDCommTestPayloadMsg *_RFIDCommTestPayloadMsg, void *_buffer, int offset);

/*
 * Serialize a RFIDCommTestPayloadMsg-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a RFIDCommTestPayloadMsg-message is embedded in another message.
 */
int RFIDCommTestPayloadMsg_write_with_tag(struct RFIDCommTestPayloadMsg *_RFIDCommTestPayloadMsg, void *_buffer, int offset, int tag);

/*
 * Deserialize a RFIDCommTestPayloadMsg-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _RFIDCommTestPayloadMsg will be reset to 0 before _buffer is interpreted.
 */
int RFIDCommTestPayloadMsg_read_delimited_from(void *_buffer, struct RFIDCommTestPayloadMsg *_RFIDCommTestPayloadMsg, int offset);


/*******************************************************************
 * Message: rfid_board_api.proto, line 350
 *******************************************************************/

/* Maximum size of a serialized RFIDFieldStatePayloadMsg-message, useful for buffer allocation. */
#define MAX_RFIDFieldStatePayloadMsg_SIZE 12

/* Structure that holds a deserialized RFIDFieldStatePayloadMsg-message. */
struct RFIDFieldStatePayloadMsg {
  unsigned long _errorCode;
  enum RFIDFieldState _fieldState;
};
/*
 * Serialize a RFIDFieldStatePayloadMsg-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int RFIDFieldStatePayloadMsg_write_delimited_to(struct RFIDFieldStatePayloadMsg *_RFIDFieldStatePayloadMsg, void *_buffer, int offset);

/*
 * Serialize a RFIDFieldStatePayloadMsg-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a RFIDFieldStatePayloadMsg-message is embedded in another message.
 */
int RFIDFieldStatePayloadMsg_write_with_tag(struct RFIDFieldStatePayloadMsg *_RFIDFieldStatePayloadMsg, void *_buffer, int offset, int tag);

/*
 * Deserialize a RFIDFieldStatePayloadMsg-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _RFIDFieldStatePayloadMsg will be reset to 0 before _buffer is interpreted.
 */
int RFIDFieldStatePayloadMsg_read_delimited_from(void *_buffer, struct RFIDFieldStatePayloadMsg *_RFIDFieldStatePayloadMsg, int offset);
