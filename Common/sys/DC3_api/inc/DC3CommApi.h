/**
 * @file     DC3CommApi.h
 *
 * DC3 Communications API typedefs and enum defs that are related to the
 * generated messages.  This file should be included by any project that wants
 * to communicate with the DC3 board via the debug channel. It includes all the
 * error definitions, timeouts, and messages.
 *
 * @date       03/19/2015
 * @author     Harry Rostovtsev
 * @email      harry_rostovtsev@datacard.com
 * Copyright (C) 2015 Datacard. All rights reserved.
 */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef DC3COMMAPI_H_
#define DC3COMMAPI_H_

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#ifndef DC3MSGS_H_
#define DC3MSGS_H_
#include "DC3Msgs.h"
#endif

#include "DC3Errors.h"
#include "DC3Timeouts.h"
#include "dfuse.h"
#include "util.h"
#include "DC3DBElements.h"

/* Exported defines ----------------------------------------------------------*/
/**
 * @brief   Max buffer length for communications between client and DC3
 * This is the MAX length of msgs in bytes that can be sent over serial (base64
 * encoded) or UDP from the client. */
#define DC3_MAX_MSG_LEN 300

/**
 * @brief   Length of a datetime string
 * The format of this string is always:
 * YYYYMMDDhhmmss
 */
#define DC3_DATETIME_LEN 14

/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
/* These typedefs allow the project to use the enums defined in the
 * autogenerated protobuf files  */
typedef enum DC3MsgName_t        DC3MsgName_t;
typedef enum DC3MsgType_t        DC3MsgType_t;
typedef enum DC3MsgRoute_t       DC3MsgRoute_t;
typedef enum DC3BootMode_t       DC3BootMode_t;
typedef enum DC3I2CDevice_t      DC3I2CDevice_t;
typedef enum DC3AccessType_t     DC3AccessType_t;
typedef enum DC3RamTest_t        DC3RamTest_t;

/**
 * @brief   A Union of all the payload structs.
 * This union allows for some fairly significant space savings in FW since only
 * one payload msg will ever be handled at a time, there's no reason to not
 * allow them to share the space.
 */
typedef union DC3PayloadMsgs {
   struct DC3StatusPayloadMsg    statusPayload;
   struct DC3VersionPayloadMsg   versionPayload;
   struct DC3BootModePayloadMsg  bootmodePayload;
   struct DC3FlashMetaPayloadMsg flashMetaPayload;
   struct DC3FlashDataPayloadMsg flashDataPayload;
   struct DC3I2CDataPayloadMsg   i2cDataPayload;
   struct DC3RamTestPayloadMsg   ramTestPayload;
} DC3PayloadMsgUnion_t;


/* Exported constants --------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/


#ifdef __cplusplus
}
#endif

#endif                                                       /* DC3COMMAPI_H_ */
/******** Copyright (C) 2013 Datacard. All rights reserved *****END OF FILE****/
