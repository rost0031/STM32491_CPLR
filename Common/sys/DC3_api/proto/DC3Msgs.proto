// File: DC3Msgs.proto
// 
// This file is a proto file that is used to define binary msgs and automatically
// generating C code to be used by either intel (win32 and linux), arm, and 
// powerpc processors. See
// http://code.google.com/p/protobuf-embedded-c/ for detail of how this is done 
//
// See https://developers.google.com/protocol-buffers/docs/proto#simple for 
// how to specify messages in the proto language of Protocol Buffers but keep
// in mind that the "Protobuf-Embedded-C" is more limited than the Google version.
//
// 1). General message layout:
// Communication between the Coupler board and a client is done via serialized 
// msgs that reside in a buffer (no longer than 256 bytes after base64 encoding).  
// These messages should be base64 encoded (use libb64 for guaranteed 
// compatibility but any std base64 encoding/decoding library should work as 
// long as there are no newlines placed every 72/73 characters since newlines 
// denote the end of the message).
// 
// Messages MUST start with an Basic message, followed by 1 or 0 optional
// Payload messages.  The DC3BasicMsg contains a field called "msgPayload" which 
// specifies the next attached Payload message.  If the field is set to 
// "_DC3NoMsg", there is no payload msg.
// 
// This approach allows a flexible use of minimally sized messages and allows
// the sender to group them in any way necessary while telling the receiver how
// to correctly decode them.
//
// 2).  Detailed Message Description
// There are 2 types of messages: DC3BasicMsg and DC3PayloadMsg.  They are 
// described in detail below:
// 
// DC3BasicMsg - This message MUST be sent in the front of the buffer.  It 
// lets the receiver have a known starting point from which to start decoding 
// the message.  The basic message is used to:
//   A. request an action or data (DC3_Req), 
//   B. acknowledge reception (DC3_Ack), 
//   C. send progress (DC3_Prog),  
//   D. indicate completion (DC3_Done).
// 
// Required Fields - all the common fields which always have to be sent:
// 
// msgName -  DC3MsgName_t type that uniquely identifies the message.  This should
//            not be a payload message.
// msgID   -  Some number that allows the sender to specify how it will find
//            the responses to this request msg.
// msgType -  DC3MsgType_t that if the DC3DescMsg is in front of a:
//   A. DC3_Req - Request message - used to request data or actions from the 
//                 DC3 API.
//   B. DC3_Ack - Acknowledgement message - used by the DC3 API to let the 
//                 sender know that the Req message was successfully received.
//   C. DC3_Prog- Specifies whether the message is a Progress message.
//   D. DC3_Done- Specifies whether the message is a Done message.
//
// msgPayload - DC3MsgName_t type that specifies what payload message is appended
//            to the back of this message.  This allows you to send any payload
//            that is needed for this action or data request.  For example, if 
//            requesting a CommTest, you can specify a payload that will be sent
//            over that the DC3 board should receive, decode, and send back to 
//            you so you can verify its integrity.  In some cases, such as simple
//            Req msgs and DC3_Ack msgs, this field can be set to DC3NoMsg to avoid
//            sending along any unnecessary extra data.  In general, this field 
//            can be any of the DC3MsgName_t.  In most cases, it will be _DC3NoMsg, 
//            which means there's no payload and consequently, no extra data is 
//            being sent or if the msgType is DC3_Done, there's no error to report.
//            Some more complicated messages will use custom payload msgs which 
//            need to be defined in this file.
//
// DC3PayloadMsg - This is a Payload message and is optional.  Most common use
// cases for payload msgs are:
//   
//   A. Non-standard DC3_Req msgs: most requests can be issued without a 
//   payload msg. For example, if you want to issue an DC3CmdLLResetBoardMsg, 
//   there are no extra arguments to send with.  The DC3_Req and DC3_Ack type  
//   msgs do not need any extra data.  However, if you're sending a more  
//   complicated msg like DC3CmdLLCommTestMsg which tests the communication between  
//   the DC3 Board and the client, you have to send the along data which has to
//   be sent back to verify the integrity of the transmission.  This extra data 
//   has to travel in a DC3PayloadMsg called DC3CommTestPayloadMsg.  This 
//   DC3PayloadMsg is tailored for the DC3CmdLLCommTestMsg and would be sent with 
//   the DC3_Req type DC3CmdLLCommTestMsg.
//
//   B. Some DC3_Prog msgs: Some progress messages will want to send back 
//   updated state data or other progress data.  These will require 
//   DC3PayloadMsg customized for the task.
//
//   C. Most DC3_Done msgs: Almost all DC3_Done msgs will send back at least
//   a status/error code to indicate the success or failure of a command.  If
//   only a simple status/error code is enough, DC3StatusPayloadMsg can be used.
//   Many commands will be more complicated and will require sending of more
//   data back.  One example is a DC3CmdHLReadRawPagesMsg which has to send
//   back many bytes of data.  Hence, it has a custom DC3PayloadMsg called
//   DC3RawMultiPageDataPayloadMsg which has the needed fields and capacity to
//   send back all the data.
// 
// Below is a very simple example which illustrates the most 
// common usage: 
// (ResetDC3Chip is a fictional message)
//
// Client                                                             DC3 Board
//   |
// *Send* [[********DC3BasicMsg************]\n]>>>>>>>>>>>>>>>>>>>>>>>*Receive*
//          < msgName = DC3ResetDC3ChipMsg            
//          < msgID   = [uint]                          
//          < msgType = DC3_Req
//          < msgRoute = [DC3MsgRoute_t]  
//          < msgProgReq = [0|1]                        
//          < msgPayload = DC3NoMsg
// *Rec*  [[********DC3BasicMsg************]\n]<<<<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3ResetDC3ChipMsg
//          < msgID   = [uint]              
//          < msgType = DC3_Ack
//          < msgRoute = [DC3MsgRoute_t]  
//          < msgProgReq = [0|1]                        
//          < msgPayload = DC3NoMsg
//
// (If something went wrong and the result is an error/status to report)
// *Rec*  [[**********DC3BasicMsg**********][**DC3PayloadMsg****]\n]<<<<*Send*
//          < msgName = DC3ResetDC3ChipMsg     < errorCode = error or status
//          < msgID   = [uint]                      
//          < msgType = DC3_Done
//          < msgRoute = [DC3MsgRoute_t]  
//          < msgProgReq = [0|1]               
//          < msgPayload = DC3StatusPayloadMsg
//
//////////////////////// OR ////////////////////////////////////////////////////
//
// (If everything went ok and there's no error or no need to report one )
// *Rec*  [[**********DC3BasicMsg**********][**DC3PayloadMsg****]\n]<<<<<<<*Send*
//          < msgName = DC3ResetDC3ChipMsg     < errorCode = error or status
//          < msgID   = [uint]              
//          < msgType = DC3_Done
//          < msgRoute = [DC3MsgRoute_t]  
//          < msgProgReq = [0|1]                        
//          < msgPayload = DC3StatusPayloadMsg
//
// 3). Message naming convention - Message names should follow the following format:
// DC3GetStatusMsg
// [0][--1---][2]
// where 
// field 0: This should always be "DC3".  It acts as a namespace and reduces the
//          possibility that another project is using this name for its msgs.
// field 1: Who/what is being referenced/requested/ordered
// field 2: Should always be "Msg".  This is primarily to differentiate them in 
//          the code from other similarly named things like events and the 
//          structures used to extract the info from the messages.
//
// Example msg exchange with custom payload msgs (with field fill examples):
//
// Client                                                             DC3 Board
//   |
// *Send* [[*********DC3BasicMsg**********][**DC3PayloadMsg****]\n]>>>>>Receive*
//          < msgName = DC3CmdLLCommTestMsg  < payload = 0xA5A5A5A5          
//          < msgID   = [uint]              < errorCode = error or status     
//          < msgType = DC3_Req                   
//          < msgRoute = [DC3MsgRoute_t]  
//          < msgProgReq = [0|1]
//          < msgPayload = DC3CommTestPayloadMsg
// *Rec*  [[DC3BasicMsg]\n]<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3CmdLLCommTestMsg
//          < msgID   = [uint]              
//          < msgType = DC3_Ack
//          < msgRoute = [DC3MsgRoute_t]  
//          < msgProgReq = [0|1]                        
//          < msgPayload = DC3NoMsg
// *Rec*  [[**********DC3BasicMsg************][**DC3PayloadMsg*****]\n]<<<*Send*
//          < msgName = DC3CmdLLCommTestMsg     < payload = 0xA5A5A5A5        
//          < msgID   = [uint]                 < errorCode = error or status
//          < msgType = DC3_Done                 
//          < msgRoute = [DC3MsgRoute_t]  
//          < msgProgReq = [0|1]
//          < msgPayload = DC3CommTestPayloadMsg
//
// Author: Harry Rostovtsev 
// Email : harry_rostovtsev@datacard.com
//
//Optional Embedded C internal options:
//@max_repeated_length=127
//@max_string_length=32
//@max_bytes_length=112


//------------------------------------------------------------------------------
// -------------- START of enumerations used by DC3 API ------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// See rules for DC3BasicMsg at the top of file.
// 
// This MUST CONTAIN ALL THE MESSAGE TYPES DESCRIBED IN THIS PROTO FILE.  
// 
// Each msg must be either a DC3BasicMsg or a DC3PayloadMsg type.  The 
// DC3BasicMsgs do not need full message definitions since they all use the 
// same msg type (DC3BasicMsg) but the DC3PayloadMsgs should be defined to 
// enumerate their custom fields.
// 
enum DC3MsgName_t 
{
    DC3NoMsg              = 0; // Used to indicate the end of a message 
                               // sequence. Usually used in the DC3Payload field 
                               // of a DC3BasicMsg
                              
    DC3StatusPayloadMsg   = 1; // DC3PayloadMsg - Used to report a status/error 
                               // by simple messages that don't normally have 
                               // their own payload msg associated with them. 
                               // This is useful for requests that require no 
                               // data other than status to be reported back.
    
    DC3GetVersionMsg      = 2; // DC3BasicMsg   - Used to get versions and build
                               // dates from the DC3 board and return 
                               // DC3VersionPayloadMsg.
                              
    DC3VersionPayloadMsg  = 3; // DC3PayloadMsg - Used to send back versions and 
                               // build dates from the DC3 board.
                              
    DC3GetBootModeMsg     = 4; // DC3BasicMsg   - Used to find which boot mode 
                               // the DC3 board in.  Note, system Rom mode will  
                               // not respond to this (or any msgs other than  
                               // DFU) msg.
                              
    DC3SetBootModeMsg     = 5; // DC3BasicMsg   - Used to tell the DC3 board to 
                               // boot to: 
                               // Bootloader  - Used to flash new Application FW
                               // Application - Main run mode 
                               // System ROM mode - used to flash Bootloader 
                               //               (not currently implemented).
                              
    DC3BootModePayloadMsg = 6; // DC3PayloadMsg - Used to send the current 
                               // BootMode information with GetBootMode and 
                               // SetBootMode msgs.
                              
    DC3FlashMsg           = 7; // DC3BasicMsg - Used to send and flash the FW
    
	DC3FlashMetaPayloadMsg = 8;// DC3PayloadMsg - Used to as a payload with 
	                           // DC3FlashMsg basic msg to send FW image type, 
	                           // size, and CRC of the FW image that will 
	                           // follow. Also used to send back status of each 
	                           // packet to verify integrity.
	                           
    DC3FlashDataPayloadMsg = 9;// DC3PayloadMsg - Used as a data payload by 
                               // DC3FlashMsg basic msg. Used to send FW image 
                               // and associated meta-data (fw packet number and
                               // CRC of data included)
                              
    DC3I2CReadMsg        = 10; // DC3BasicMsg  - Used to send an I2C read cmd.
                               // Requires a DC3I2CDataPayloadMsg to fully 
                               // specify what to read
    
    DC3I2CWriteMsg       = 11; // DC3BasicMsg  - Used to send an I2C write cmd.
                               // Requires a DC3I2CDataPayloadMsg to fully 
                               // specify what to write
    
    DC3I2CDataPayloadMsg = 12; // DC3PayloadMsg - Used as a data payload by 
                               // DC3I2CReadMsg and DC3I2CWriteMsg to specify 
                               // what to read and write, as well as send data 
                               // and status back.
    
    DC3RamTestMsg        = 13; // DC3BasicMsg  - Used to send an RAM test cmd.
    
    DC3RamTestPayloadMsg = 14; // DC3PayloadMsg - Used as a data payload by 
                               // DC3RamTestMsg to send status and errors back. 
                               
    DC3DbgEnableEthMsg   = 15; // DC3BasicMsg  - Used to enable dbg on eth. 
                               // Uses no payload msg.
                               
    DC3DbgDisableEthMsg  = 16; // DC3BasicMsg  - Used to disable dbg on eth. 
                               // Uses no payload msg.                                                              
    
    DC3DbgEnableSerMsg   = 17; // DC3BasicMsg  - Used to enable dbg on serial. 
                               // Uses no payload msg.
                               
    DC3DbgDisableSerMsg  = 18; // DC3BasicMsg  - Used to disable dbg on serial. 
                               // Uses no payload msg.
                                                                
    DC3DbgRstDefaultMsg  = 19; // DC3BasicMsg  - Used to reset the default dbg
                               // levels and interfaces.  No payload.                                
                               
    DC3DbgEnableMsg      = 20; // DC3BasicMsg  - Used to enable debug for a 
                               // given debug module. Uses DC3DbgPayloadMsg

    DC3DbgDisableMsg     = 21; // DC3BasicMsg  - Used to disable debug for a 
                               // given debug module. Uses DC3DbgPayloadMsg
                               
	DC3DbgGetCurrentMsg  = 22; // DC3BasicMsg  - Used to get the current debug 
	                           // settings for all the modules of DC3. Uses 
	                           // DC3DbgPayloadMsg
	                                                                                  
	DC3DbgSetCurrentMsg  = 23; // DC3BasicMsg  - Used to set the current debug 
	                           // settings for all the modules of DC3. Uses
                               // DC3DbgPayloadMsg
	                           	                                                                                  
    DC3DbgPayloadMsg     = 24; // DC3PayloadMsg - Used as a data payload by 
                               // DC3DbgEnableMsg and DC3DbgDisableMsg to enable
                               // and disable debugging of various system 
                               // components on the DC3.  Also used by 
                               // DC3DbgGetCurrentMsg and DC3DbgSetCurrentMsg to
                               // set and get the entire debug settings group.                      
                              
                              
}

//------------------------------------------------------------------------------
// This enum defines all the different response types that can identify a msg
// type.
enum DC3MsgType_t 
{
    DC3_NoMsgType   = 0; // For error checking. This shouldn't be used by users.
    DC3_Req         = 1; // This is to mark the field when used in a Request 
                         // message.
    DC3_Ack         = 2; // This is to mark the field when used in a Acknowledge
                         // message.
    DC3_Prog        = 3; // This is used to mark a response message as "Progress"
                         // message. It can be used to send back status updates 
                         // for long commands to prevent timeouts or as a very 
                         // simplistic logging.
    DC3_Done        = 4; // This marks the message as a "Done" message which 
                         // signifies that the action that was requested has been
                         // completed and all work related to it is done.
    DC3_MaxMsgType  = 5; // For error checking. This shouldn't be used by users.
}

//------------------------------------------------------------------------------
// This enum defines the source of the message going to and from DC3 board. This
// is to enable the responses to go back to the proper port. It is expected that
// the sender of the message will set the source if a reply is expected.
//
enum DC3MsgRoute_t
{
	DC3_NoRoute     = 0; // For error checking. This shouldn't be used by users.
    DC3_Serial      = 1; // The message is source/destination is the serial 
                         // debug port
    DC3_EthSys      = 2; // The message is source/destination is a client that 
                         // is communicating the host device to which the DC3 
                         // board via the ethernet sys port (currently 1500). 
                         // This really shouldn't be used since it's reserved 
                         // for communicating with the controller. The only 
                         // reason this exists is if at some time in the future, 
                         // the controller decides to use this port.
    DC3_EthLog      = 3; // The message is source/destination is a client that  
                         // is communicating the host device to which the DC3 
                         // board via the ethernet log port (currently 1501).

    DC3_EthCli      = 4; // The message is source/destination is a client that 
                         // is communicating the host device to which the DC3 
                         // board  via the ethernet cli port (currently 1502). 
                         // This is the preferred port for the client to connect 
                         // to.
    DC3_MaxRoutes   = 5; // For error checking. This shouldn't be used by users.
}

//------------------------------------------------------------------------------
// This enum defines the boot mode of the DC3 board.  It can be booted to 
// system mode or flash mode.  System mode is used to flash FW over serial
// using the DFU protocol, which is the system boot mode provided by ST Micro.
// The Flash mode is used for regular operation and the system boots from Flash
// 
enum DC3BootMode_t
{
    DC3_NoBootMode   = 0; // For error checking. This shouldn't be used.
    DC3_SysRomBoot   = 1; // STM32 System ROM boot mode which allows DFU 
                          // commands to be used to program the bootloader. This 
                          // is currently not implemented. 
    DC3_Bootloader   = 2; // Firmware update operation mode.  This tells the DC3 
                          // board to boot into the Bootloader Mode. 
    DC3_Application  = 3; // Main Application mode.  This tells the DC3 board to 
                          // boot into its primary mode of operation: 
                          // Application/SCIPSIII mode. 
    DC3_MaxBootModes = 4; // For error checking. This shouldn't be used.
}

//------------------------------------------------------------------------------
// This enum defines all the different I2C devices that exist on the board 
enum DC3I2CDevice_t
{
    DC3_EEPROM      = 0; // R/W EEPROM on I2C bus 1 
    DC3_SNROM       = 1; // RO EEPROM on I2C bus 1 that contains a serial number.
    DC3_EUIROM      = 2; // RO EEPROM on I2C bus 1 that contains Unique ID
    DC3_MaxI2CDev   = 3; // For error checking. This shouldn't be used by users.
}

//------------------------------------------------------------------------------
// This enum defines all the different I2C devices that exist on the board 
enum DC3AccessType_t
{
    DC3_ACCESS_NONE = 0; // No access type.  Used as a default value 
    DC3_ACCESS_BARE = 1; // Blocking access where no RTOS services are running. 
                         // All returns are done via passed in buffer.  Very slow
                         // and blocking. 
    DC3_ACCESS_QPC  = 2; // Non-blocking access performed from QPC Active Objects.
                         // All returns are done via events that requesting AO 
                         // should know how to handle
    DC3_ACCESS_FRT  = 3; // Non-blocking access performed from a FreeRTOS thread.
                         // All returns are done via a QEQueue that the 
                         // requesting thread should wait on. Note, this is only
                         // available in Application boot mode.
}

//------------------------------------------------------------------------------
// This enum defines all the different RAM memory tests that exist on the board 
enum DC3RamTest_t
{
    DC3_RAM_TEST_NONE      = 0; // No test.  Used for error checking 
    DC3_RAM_TEST_DATA_BUS  = 1; // Ram test that tests the integrity of the RAM 
                                // data bus.  
    DC3_RAM_TEST_ADDR_BUS  = 2; // Ram test that tests the integrity of the RAM 
                                // address bus.
    DC3_RAM_TEST_DEV_INT   = 3; // Ram test that tests the integrity of the RAM 
                                // device itself.
    DC3_RAM_TEST_MAX       = 4; // Max number of tests.  Used for error checking.                               
}

//------------------------------------------------------------------------------
// This enum defines all the different debug levels that are used by DC3
enum DC3DbgLevel_t 
{
    DC3_DBG = 0;     // Lowest level of debugging.  Everything printed.
    DC3_LOG = 1;     // Basic logging.
    DC3_WRN = 2;     // Warnings. Always printed.
    DC3_ERR = 3;     // Critical errors.  Always printed.
    DC3_CON = 4;     // This is reserved for printing to the console as part of
                     // regular operation and nothing will be prepended.  Also, the
                     // DBG_LEVEL will be checked to issue a MENU signal instead of a
                     // LOG signal
    DC3_ISR = 5;     // Use this with isr_debug_slow_printf to get smaller printout
}

//------------------------------------------------------------------------------
// This enum defines All the different settings that can exist in the settings 
// database on the DC3 board.
enum DC3DBElem_t 
{
    DC3_DB_MAGIC_WORD           = 0; // Magic word that specifies if a DB exists
                                     // or needs to be init to a default.
    DC3_DB_VERSION              = 1; // Keeps track of DB version to allow 
                                     // upgrades and additions
    DC3_DB_MAC_ADDR             = 2; // Mac address stored in the special UID 
                                     // section of the RO EEPROM
    DC3_DB_IP_ADDR              = 3; // IP address stored in main EEPROM
    DC3_DB_SN                   = 4; // Serial number stored in the special SN 
                                     // section of RO EEPROM
    DC3_DB_BOOT_MAJ             = 5; // Major version of bootloader FW image
    DC3_DB_BOOT_MIN             = 6; // Minor version of bootloader FW image
    DC3_DB_BOOT_BUILD_DATETIME  = 7; // Build datetime of the bootloader FW image
    DC3_DB_APPL_MAJ             = 8; // Major version of application FW image
    DC3_DB_APPL_MIN             = 9; // Minor version of application FW image
    DC3_DB_APPL_BUILD_DATETIME = 10; // Build datetime of the application FW image
    DC3_DB_FPGA_MAJ            = 11; // Major version of FPGA FW image
    DC3_DB_FPGA_MIN            = 12; // Minor version of FPGA FW image
    DC3_DB_FPGA_BUILD_DATETIME = 13; // Build datetime of the FPGA FW image
    DC3_DB_DBG_MODULES         = 14; // uint32_t bitfield states of debug modules.
    DC3_DB_DBG_DEVICES         = 15; // uint8_t bitfield states of debug devices.
    
   // Add more elements here.  If adding elements after code is released, bump
   // the DB_VERSION up and make sure to bump DB_MAX_ELEM to have the highest 
   // number

   DC3_DB_MAX_ELEM             = 16; // Max number of elements that can be stored.  
                                     // ALWAYS LAST
}

//------------------------------------------------------------------------------
// These are the devices which can have debugging output over them enabled/disabled.
//
// These are limited to 8 bit and MUST BE MASKABLE.  These enum masks will be
// used for both naming the debug output devices and for checking whether their
// debug capabilities have been enabled.
//
enum DC3DbgDeviceSetting_t {
   DC3_DBG_DEV_SER             = 1; // Debug output over serial is enabled
   DC3_DBG_DEV_ETH             = 2; // Debug output over ethernet is enabled
}

//------------------------------------------------------------------------------
// --------------- END of enumerations used by DC3 API -------------------------
//------------------------------------------------------------------------------



//------------------------------------------------------------------------------
// ---------- START of message definitions used by DC3 API ---------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3BasicMsg
// This is a type of message that encompasses all basic msgs which start all
// communications.  Hence, it doesn't have a tag.
// Msg Type - Synchronous.  Special.
// Msg Desc - This is the Basic message that must be used to send all the common 
//            request/ack/progress/done portions of messages.   
// Standard Field Description:
// msgName -  DC3MsgName_t that uniquely identifies the message.
// msgID   -  Some number that allows the sender to specify how it will find
//            the responses to this request msg.
//
// msgType - DC3MsgType_t that if the DC3DescMsg is in front of a:
//   A. DC3_Req - Request message - used to request data or actions from the DC3 API.
//   B. DC3_Ack - Acknowledgement message - used by the DC3 API to let the sender 
//                 know that the Req message was successfully received.
//   C. DC3_Prog- Specifies whether the message is a Progress message.
//   D. DC3_Done- Specifies whether the message is a Done message.
//
// msgRoute - See DC3MsgRoute_t enum for a full description.  This allows msg 
//            forwarding on the host device.
//   A. DC3_HostDevice  - The message is source/destination is the directly 
//            attached host device.
//   B. DC3_Console     - The message is source/destination is the serial debug 
//            console
//   C. DC3_ExtClient   - The message is source/destination is a client that is 
//            communicating the host device to which the DC3 board is attached 
//            to.  Let that host device figure out how to route the message.
//
// msgReqProg - Request progress messages to be sent back to the sender.
//   0 - Don't send progress msgs
//   1 - Send progress msgs
//      
// msgPayload - DC3MsgName_t type that specifies what payload message is appended
//            to the back of this message.  This allows you to send any payload
//            that is needed for this action or data request.  For example, if 
//            requesting a CommTest, you can specify a payload that will be sent
//            over that the DC3 board should receive, decode, and send back to 
//            you so you can verify its integrity.  In some cases, such as simple
//            Req msgs and Ack msgs, this field can be set to DC3NoMsg to avoid
//            sending along any unnecessary extra data.  In general, this field 
//            can be any of the DC3MsgName_t.  In most cases, it will be empty, 
//            which means there's no payload and consequently, no extra data is 
//            being sent or if the msgType is DC3_Done, there's no error to report.
//            Some more complicated messages will use custom payload msgs which 
//            need to be defined in this file.  See DC3CommTestPayloadMsg for 
//            an example.
//
message DC3BasicMsg 
{
    required DC3MsgName_t  msgName       = 1;
    required DC3MsgType_t  msgType       = 2;
    required DC3MsgRoute_t msgRoute      = 3;
    required uint32        msgID         = 4;
    required uint32        msgReqProg    = 5;
    required DC3MsgName_t  msgPayload    = 6;
}
// END DC3BasicMsg
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3StatusPayloadMsg
// Msg Tag  - 1 
// Msg Type - Synchronous.  Payload (optional)
// Msg Desc - This is a Status Payload message and is optional.  It's a generic
//            status payload message that only has 1 uint32_t field.  It should 
//            be used to report errors (if any occurred) or just status as part 
//            of a Resp msg. If you plan on appending this payload msg, make 
//            sure to set the field "msgPayload" in the main msg to the enum  
//            name of this payload msg:   DC3StatusPayloadMsg
// Field Description:
// errorCode - Error code to return when appended to the "Done" version of the 
//            main message.
message DC3StatusPayloadMsg 
{
    required uint32     errorCode     = 1;
}
// END DC3StatusPayloadMsg
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3GetVersionMsg
// Msg Tag  - 2
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This gets various version numbers of things on the DC3 board
//
// No message definition needed.  Uses DC3BasicMsg with 
// DC3VersionPayloadMsg as a payload for DC3_Done 
// Example:
// Client                                                             DC3 Board
//   |                                                                      |
// *Send* [[**************DC3BasicMsg*********]\n]>>>>>>>>>>>>>>>>>>>>>>>>*Rec*
//          < msgName = DC3GetVersionMsg     
//          < msgID   = [uint32]                         
//          < msgType = DC3_Req                
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]                                                   
//          < msgPayload = DC3NoMsg
// *Rec*  [[DC3BasicMsg]\n]<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3GetVersionMsg
//          < msgID   = [uint32]             
//          < msgType = DC3_Ack    
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]                    
//          < msgPayload = DC3NoMsg
// *Rec*  [[**************DC3BasicMsg*********][**DC3PayloadMsg**]\n]<<<*Send*
//          < msgName = DC3GetVersionMsg        < errorCode = error or status  
//          < msgID   = [uint32]                < fwVersionString = string of data with FW version
//          < msgType = DC3_Done                < fwDateString = string of data with FW date
//          < msgProgReq = [0|1]                < fwVersionString_len = Number of characters in FW version string.
//          < msgRoute = [DC3MsgRoute_t]        < fwDateString_len = Number of characters in FW date string.
//          < msgPayload = DC3VersionPayloadMsg < dbVersion = version of the settings database
// END DC3GetVersionMsg
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3VersionPayloadMsg 
// Msg Tag  - 3
// Msg Type - DC3PayloadMsg.  Sent appended to the DC3GetVersionMsg 
//            DC3_Done type msg and uses DC3VersionPayloadMsg structure.
// Msg Desc - Sent as a response to a DC3GetVersionMsg attached to the
//            DC3GetVersionMsg DC3_Done type msg.
// 
// See DC3GetVersionMsg for example usage.
message DC3VersionPayloadMsg 
{
    required uint32 errorCode    = 1; // error code indicating status of the req.
    required bytes  fwVerString  = 2; // DC3 FW version string
    required bytes  fwDateString = 3; // DC3 FW date string
    required uint32 dbVersion    = 4; // Version of the settings database
}
// END DC3VersionPayloadMsg.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3GetBootModeMsg
// Msg Tag  - 4
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message is handles communications needed for getting the 
//            current run mode of the DC3 board.
//
// No message definition needed.  Uses DC3BasicMsg with DC3BootModePayloadMsg
// as a payload for DC3_Done.
// Example:
// Client                                                             DC3 Board
//   |                                                                      |
// *Send* [[**************DC3BasicMsg***********]\n]>>>>>>>>>>>>>>>>>>>>*Receive*
//          < msgName = DC3GetBootModeMsg
//          < msgID   = [uint32]                         
//          < msgType = DC3_Req        
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]               
//          < msgPayload = DC3NoMsg
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3GetBootModeMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack      
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]                  
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3GetBootModeMsg      < errorCode = DC3_ERR_CODE  
//          < msgID   = [uint32]               < bootmode = [DC3_SysRomBoot|DC3_Bootloader|DC3_Application]         
//          < msgType = DC3_Done                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3BootModePayloadMsg   
// END DC3GetBootModeMsg
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3SetBootModeMsg
// Msg Tag  - 5
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message is handles communications needed for setting the 
//            current run mode of the DC3 board.
//
// No message definition needed.  Uses DC3BasicMsg with DC3BootModePayloadMsg
// as a payload for DC3_Done.
// Example:
// Client                                                             DC3 Board
//   |                                                                      |
// *Send*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]>>>>>>>>*Rec*
//          < msgName = DC3SetBootModeMsg        < errorCode = N/A  
//          < msgID   = [uint32]                 < bootmode = [DC3_SysRomBoot|DC3_Bootloader|DC3_Application]       
//          < msgType = DC3_Req                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3BootModePayloadMsg
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3SetBootModeMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack                        
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3SetBootModeMsg      < errorCode = DC3_ERR_CODE  
//          < msgID   = [uint32]               < bootmode = [DC3_SysRomBoot|DC3_Bootloader|DC3_Application]  
//          < msgType = DC3_Done                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3BootModePayloadMsg
// END DC3SetBootModeMsg
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3BootModePayloadMsg 
// Msg Tag  - 6
// Msg Type - DC3PayloadMsg.  
// Msg Desc - Sent appended to the DC3GetBootModeMsg DC3_Done msg and
//            DC3SetBootModeMsg DC3_Req msg.
//
// Non-standard Field Description: (see below)
message DC3BootModePayloadMsg 
{
	required uint32     errorCode   = 1; // a uint32 number that specifies the
	                                     // error encountered, if any.
    required DC3BootMode_t bootMode = 2; // enum that specifies the 
                                         // boot mode being requested.
                                         // Can be one of the following: 
                    // DC3_SysRomBoot  - STM32 system ROM bootmode (not 
                    //                   currently implemented)
                    // DC3_Bootloader  - bootloader mode
                    // DC3_Application - application mode
                    // The system boot mode will not respond to messages so the 
                    // above are the only possible values. 
}
// END DC3BootModePayloadMsg.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3FlashMsg
// Msg Tag  - 7
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message is handles flashing new FW to the board.
//
// No message definition needed.  Uses DC3BasicMsg with DC3FlashInitPayloadMsg for
// initial request, followed by DC3FlashDataPayloadMsg for data transmission.
// Example:
// 1. Initialize the FW flash procedure (note the msgProgReq being SET)
// Client                                                             DC3 Board
//   |                                                                      |
// *Send*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]>>>>>>>>*Rec*
//          < msgName = DC3FlashMsg               < imageCrc 
//          < msgID   = n (some uint)             < imageSize
//          < msgType = DC3_Req                   < imageType
//          < msgProgReq = [0|1]                  < imageMajor            
//          < msgRoute = [DC3MsgRoute_t]          < imageMinor
//          < msgPayload = DC3FlashMetaPayloadMsg < imageDatetime
//                                                < imageNumPackets
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3FlashMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack                        
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3FlashMsg             < errorCode = DC3_ERR_CODE  
//          < msgID   = [uint32]                
//          < msgType = DC3_Done                
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3StatusPayloadMsg
//
// 2. Send the data packets that will be flashed (loop until out of data)
//
// *Send*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]>>>>>>>>*Rec*
//          < msgName = DC3FlashMsg               < dataCrc 
//          < msgID   = n + 1                     < dataBuf_len
//          < msgType = DC3_Req                   < dataBuf
//          < msgProgReq = [0|1]                  < seqCurr ( n through n + x ) 
//          < msgRoute = [DC3MsgRoute_t]             
//          < msgPayload = DC3FlashDataPayloadMsg
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3FlashMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack                        
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3FlashMsg              < errorCode = DC3_ERR_CODE  
//          < msgID   = [uint32]                
//          < msgType = DC3_Done                
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3StatusPayloadMsg
// 
// 3.  Repeat until all the data packets have been sent.  If at any point there's
//     a failure, an error will come back with one of the done msgs and the 
//     process should stop.
//
// 4.  Send last data packet and wait for a Done msg. 
//     (note the last packet has seqCur equal to seqTotal and a 
//     DC3FlashMetaPayloadMsg as a payload in the final Done response.)
//
// *Send*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]>>>>>>>>*Rec*
//          < msgName = DC3FlashMsg               < dataCrc 
//          < msgID   = n + 1                     < dataBuf_len
//          < msgType = DC3_Req                   < dataBuf
//          < msgProgReq = [0|1]                  < seqCurr ( n + x ) 
//          < msgRoute = [DC3MsgRoute_t]          < seqTotal ( n + x )
//          < msgPayload = DC3FlashDataPayloadMsg
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3FlashMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack                        
//          < msgProgReq = [0|1]  
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3FlashMsg                < errorCode 
//          < msgID   = n (some uint)             
//          < msgType = DC3_Done                   
//          < msgProgReq = [0|1]                              
//          < msgRoute = [DC3MsgRoute_t]             
//          < msgPayload = DC3StatusPayloadMsg  
//                                             
// END DC3FlashMsg
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3FlashMetaPayloadMsg 
// Msg Tag  - 8
// Msg Type - DC3PayloadMsg.  
// Msg Desc - Sent appended to the very first DC3FlashMsg DC3_Req msg.
//
// Non-standard Field Description: (see below)
message DC3FlashMetaPayloadMsg 
{
    required uint32 errorCode        = 1; // Status of cmd.  Only used if being 
                                          // sent back as a payload to a Done or 
                                          // Prog msg.  Not used for Req. 
    required uint32 imageCrc         = 2; // CRC of the entire FW image. 
    required uint32 imageSize        = 3; // size of the coming FW image (in bytes)
    required DC3BootMode_t imageType = 4; // enum that specifies the 
                                          // type this FW image. Can be one of the
                                          // following: 
                                          //  -- DC3_Bootloader  - bootloader mode 
                                          //  -- DC3_Application - application mode
                                          // The system boot mode will not respond
                                          // to messages so the above are the only 
                                          // possible values.
    required uint32 imageMaj         = 5; // Major version
    required uint32 imageMin         = 6; // Minor version
    required string imageDatetime    = 7; // Build date and time string
    required uint32 imageNumPackets  = 8; // Number of FW image data packets to 
                                          // expect.
 
}
// END DC3FlashMetaPayloadMsg.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3FlashDataPayloadMsg 
// Msg Tag  - 9
// Msg Type - DC3PayloadMsg.  
// Msg Desc - Sent appended to the DC3FlashMsg DC3_Req DC3SetBootModeMsg DC3_Req 
//            after the first one.  (See example in description of DC3FlashMsg
//            description).
//
// Non-standard Field Description: (see below)
message DC3FlashDataPayloadMsg 
{
	required uint32     dataCrc   = 1; // CRC of the data in dataBuf
    required bytes      dataBuf   = 2; // buffer with data
    required uint32     seqCurr   = 3; // sequence number of current data packet
}
// END DC3FlashDataPayloadMsg.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3I2CReadMsg
// Msg Tag  - 10
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message is handles requests to read data from an I2C device
//            on the board.
//
// No message definition needed.  Uses DC3BasicMsg with DC3I2CDataPayloadMsg
// as a payload for DC3_Ack and DC3_Done.
// Example:
// Client                                                               DC3 Board
//   |                                                                      |
// *Send* [[**************DC3BasicMsg********][**DC3PayloadMsg**]\n]]>>*Receive*
//          < msgName = DC3I2CReadMsg           < i2cDev = [DC3I2CDevice_t]
//          < msgID   = [uint32]                < start = [0 < N < maxSize]        
//          < msgType = DC3_Req                 < nBytes = [1 < N < maxSize-start]
//          < msgProgReq = [0|1]                < accessType = [DC3AccessType_t]
//          < msgRoute = [DC3MsgRoute_t]        < dataBuf_len = Not used  
//          < msgPayload = DC3I2CDataPayloadMsg < dataBuf = Not used
//                                              < errorCode = Not used       
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3I2CReadMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack      
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]                  
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3I2CReadMsg           < i2cDev = [DC3I2CDevice_t]
//          < msgID   = [uint32]                < start = [0 < N < maxSize]     
//          < msgType = DC3_Done                < nBytes = [1 < N < maxSize-start]
//          < msgProgReq = [0|1]                < accessType = [DC3AccessType_t]
//          < msgRoute = [DC3MsgRoute_t]        < dataBuf_len = len(dataBuf)
//          < msgPayload = DC3I2CDataPayloadMsg < dataBuf = [bytes of data]
//                                              < errorCode   = DC3_ERR_CODE  
// END DC3I2CReadMsg
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3I2CWriteMsg
// Msg Tag  - 11
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message is handles requests to write data to an I2C device
//            on the board.
//
// No message definition needed.  Uses DC3BasicMsg with DC3I2CDataPayloadMsg
// as a payload for DC3_Ack and DC3_Done.
// Example:
// Client                                                               DC3 Board
//   |                                                                      |
// *Send* [[**************DC3BasicMsg********][**DC3PayloadMsg**]\n]]>>*Receive*
//          < msgName = DC3I2CWriteMsg          < i2cDev = [DC3I2CDevice_t]
//          < msgID   = [uint32]                < start = [0 < N < maxSize]     
//          < msgType = DC3_Req                 < nBytes = [1 < N < maxSize-start]
//          < msgProgReq = [0|1]                < accessType = [DC3AccessType_t]
//          < msgRoute = [DC3MsgRoute_t]        < dataBuf_len = len(dataBuf)
//          < msgPayload = DC3I2CDataPayloadMsg < dataBuf = [bytes of data]
//                                              < errorCode = Not used       
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3I2CWriteMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack      
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]                  
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3I2CWriteMsg          < i2cDev = [DC3I2CDevice_t]
//          < msgID   = [uint32]                < start = [0 < N < maxSize]          
//          < msgType = DC3_Done                < nBytes = [1 < N < maxSize-start]
//          < msgProgReq = [0|1]                < accessType = [DC3AccessType_t]
//          < msgRoute = [DC3MsgRoute_t]        < dataBuf_len = not used
//          < msgPayload = DC3I2CDataPayloadMsg < dataBuf = not used
//                                              < errorCode   = DC3_ERR_CODE  
// END DC3I2CWriteMsg
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3I2CDataPayloadMsg 
// Msg Tag  - 12
// Msg Type - DC3PayloadMsg.  
// Msg Desc - Sent appended to the DC3I2CWriteMsg  and DC3I2CReadMsg DC3_Req and
//            DC3_Done msgs. (See examples in description of DC3I2CWriteMsg and 
//            DC3I2CReadMsg).
//
// Non-standard Field Description: (see below)
message DC3I2CDataPayloadMsg 
{
	required DC3I2CDevice_t  i2cDev  = 1; // Specifies which I2C device to access
    required uint32          start   = 2; // offset from which to read dev from
    required uint32          nBytes  = 3; // number of bytes to read/write
    required DC3AccessType_t accType = 4; // how to access the I2C device.
    required uint32        errorCode = 5; // DC3ErrorCode that specifies status
                                       // of the requested operation.  Not used
                                       // when sent along with a DC3_Req
    required bytes           dataBuf = 6; // buffer with data                                       
}
// END DC3I2CDataPayloadMsg.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3RamTestMsg
// Msg Tag  - 13
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message is Used to send an RAM test cmd.
//
// No message definition needed.  Uses DC3BasicMsg with no payload for Req and
// DC3RamTestPayloadMsg as a payload for DC3_Prog and DC3_Done.
// Example:
// Client                                                               DC3 Board
//   |                                                                      |
// *Send* [[**************DC3BasicMsg********]>>>>>>>>>>>>>>>>>>>>>>>>>>*Receive*
//          < msgName = DC3RamTestMsg              
//          < msgID   = [uint32]                          
//          < msgType = DC3_Req                    
//          < msgProgReq = [0|1]                  
//          < msgRoute = [DC3MsgRoute_t]               
//          < msgPayload = DC3NoMsg           
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3RamTestMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack      
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]                  
//          < msgPayload = DC3NoMsg
// ... Start of optional Progress msgs ...
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3RamTestMsg          < errorCode = DC3_ERR_CODE  
//          < msgID   = [uint32]               < addr = (addr where error was found)        
//          < msgType = DC3_Prog               < test = (DC3RamTest_t is in progress)
//          < msgProgReq = [0|1]               
//          < msgRoute = [DC3MsgRoute_t]          
//          < msgPayload = DC3RamTestPayloadMsg
// ... End of optional progress msgs ...
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3RamTestMsg           < errorCode = DC3_ERR_CODE  
//          < msgID   = [uint32]                < addr = (addr where error was found if any)        
//          < msgType = DC3_Done                < test = (DC3RamTest_t test failed or last finished)
//          < msgProgReq = [0|1]               
//          < msgRoute = [DC3MsgRoute_t]          
//          < msgPayload = DC3RamTestPayloadMsg 
//                                               
// END DC3RamTestMsg
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3RamTestPayloadMsg 
// Msg Tag  - 14
// Msg Type - DC3PayloadMsg.  
// Msg Desc - Sent appended to the DC3RamTestMsg DC3_Prog and DC3_Done msgs. 
// (See examples in description of DC3RamTestMsg ).
//
// Non-standard Field Description: (see below)
message DC3RamTestPayloadMsg 
{
	required uint32     errorCode = 1; // DC3ErrorCode that specifies status
                                       // of the requested operation.
    required DC3RamTest_t  test   = 2; // Test that failed (if any)
    required uint32       addr    = 3; // Addr at which the test failed (if any)                                       
}
// END DC3RamTestPayloadMsg.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3DbgEnableEthMsg
// Msg Tag  - 15
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message is used to enable dbg on ethernet debug port. 
//
// No message definition needed.  Uses DC3BasicMsg with DC3StatusPayloadMsg
// as a payload for DC3_Done.
// Example:
// Client                                                             DC3 Board
//   |                                                                      |
// *Send*  [[************DC3BasicMsg**********]\n]>>>>>>>>>>>>>>>>>>>>>>>>>*Rec*
//          < msgName = DC3DbgEnableEthMsg         
//          < msgID   = [uint32]                        
//          < msgType = DC3_Req                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3DbgEnableEthMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack                        
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3DbgEnableEthMsg      < errorCode = DC3_ERR_CODE  
//          < msgID   = [uint32]               
//          < msgType = DC3_Done                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3StatusPayloadMsg
// END DC3DbgEnableEthMsg
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3DbgDisableEthMsg
// Msg Tag  - 16
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message is used to disable dbg on ethernet debug port. 
//
// No message definition needed.  Uses DC3BasicMsg with DC3StatusPayloadMsg
// as a payload for DC3_Done.
// Example:
// Client                                                             DC3 Board
//   |                                                                      |
// *Send*  [[************DC3BasicMsg**********]\n]>>>>>>>>>>>>>>>>>>>>>>>>>*Rec*
//          < msgName = DC3DbgDisableEthMsg         
//          < msgID   = [uint32]                        
//          < msgType = DC3_Req                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3DbgDisableEthMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack                        
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3DbgDisableEthMsg      < errorCode = DC3_ERR_CODE  
//          < msgID   = [uint32]               
//          < msgType = DC3_Done                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3StatusPayloadMsg
// END DC3DbgDisableEthMsg
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3DbgEnableSerMsg
// Msg Tag  - 17
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message is used to enable dbg on serial debug port. 
//
// No message definition needed.  Uses DC3BasicMsg with DC3StatusPayloadMsg
// as a payload for DC3_Done.
// Example:
// Client                                                             DC3 Board
//   |                                                                      |
// *Send*  [[************DC3BasicMsg**********]\n]>>>>>>>>>>>>>>>>>>>>>>>>>*Rec*
//          < msgName = DC3DbgEnableSerMsg         
//          < msgID   = [uint32]                        
//          < msgType = DC3_Req                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3DbgEnableSerMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack                        
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3DbgEnableSerMsg      < errorCode = DC3_ERR_CODE  
//          < msgID   = [uint32]               
//          < msgType = DC3_Done                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3StatusPayloadMsg
// END DC3DbgEnableSerMsg
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3DbgDisableSerMsg
// Msg Tag  - 18
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message is used to disable dbg on serial debug port. 
//
// No message definition needed.  Uses DC3BasicMsg with DC3StatusPayloadMsg
// as a payload for DC3_Done.
// Example:
// Client                                                             DC3 Board
//   |                                                                      |
// *Send*  [[************DC3BasicMsg**********]\n]>>>>>>>>>>>>>>>>>>>>>>>>>*Rec*
//          < msgName = DC3DbgDisableSerMsg         
//          < msgID   = [uint32]                        
//          < msgType = DC3_Req                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3DbgDisableSerMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack                        
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3DbgDisableSerMsg      < errorCode = DC3_ERR_CODE  
//          < msgID   = [uint32]               
//          < msgType = DC3_Done                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3StatusPayloadMsg
// END DC3DbgDisableSerMsg
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// START DC3DbgRstDefaultMsg
// Msg Tag  - 19
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message is used to reset all debugging settings to compiled
//            defaults, including levels and which ports debug is enabled on.
//
// No message definition needed.  Uses DC3BasicMsg with DC3DbgPayloadMsg
// as a payload for DC3_Done.
// Example:
// Client                                                             DC3 Board
//   |                                                                      |
// *Send*  [[************DC3BasicMsg**********]\n]>>>>>>>>>>>>>>>>>>>>>>>>>*Rec*
//          < msgName = DC3DbgRstDefaultMsg         
//          < msgID   = [uint32]                        
//          < msgType = DC3_Req                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3DbgRstDefaultMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack                        
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3DbgRstDefaultMsg      < errorCode = DC3_ERR_CODE  
//          < msgID   = [uint32]                 < uint32_t dbgSettings
//          < msgType = DC3_Done                 
//          < msgProgReq = [0|1]                 
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3DbgPayloadMsg
// END DC3DbgDisableSerMsg
//------------------------------------------------------------------------------
                                                                                             
//------------------------------------------------------------------------------
// START DC3DbgEnableMsg
// Msg Tag  - 20
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message enables a given debug module while leaving the rest
//            of the debug settings untouched.
//
// No message definition needed.  Uses DC3BasicMsg with DC3DbgPayloadMsg
// as a payload for DC3_Ack and DC3_Done.
// Example:
// Client                                                             DC3 Board
//   |                                                                      |
// *Send*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]>>>>>>*Rec*
//          < msgName = DC3DbgEnableMsg          < errorCode = Not used
//          < msgID   = [uint32]                 < uint32_t dbgSettings        
//          < msgType = DC3_Req                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3DbgEnableMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack                        
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3DbgEnableMsg          < errorCode = ERR_CODE
//          < msgID   = [uint32]                 < uint32_t dbgSettings
//          < msgType = DC3_Done                 
//          < msgProgReq = [0|1]                 
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3DbgPayloadMsg
// END DC3DbgDisableSerMsg
//------------------------------------------------------------------------------                               
                                                                                             
//------------------------------------------------------------------------------
// START DC3DbgDisableMsg
// Msg Tag  - 21
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message disables a given debug module while leaving the rest
//            of the debug settings untouched.
//
// No message definition needed.  Uses DC3BasicMsg with DC3DbgPayloadMsg
// as a payload for DC3_Ack and DC3_Done.
// Example:
// Client                                                             DC3 Board
//   |                                                                      |
// *Send*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]>>>>>>*Rec*
//          < msgName = DC3DbgDisableMsg         < errorCode = Not used
//          < msgID   = [uint32]                 < uint32_t dbgSettings        
//          < msgType = DC3_Req                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3DbgDisableMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack                        
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3DbgDisableMsg         < errorCode = ERR_CODE
//          < msgID   = [uint32]                 < uint32_t dbgSettings
//          < msgType = DC3_Done                 
//          < msgProgReq = [0|1]                 
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3DbgPayloadMsg
// END DC3DbgDisableMsg
//------------------------------------------------------------------------------    
                                                                                             
//------------------------------------------------------------------------------
// START DC3DbgGetCurrentMsg
// Msg Tag  - 22
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message retrieves the entire debug bitfield which represents
//            the settings of all the debug modules.
//
// No message definition needed.  Uses DC3BasicMsg with DC3DbgPayloadMsg
// as a payload of DC3_Done.
// Example:
// Client                                                             DC3 Board
//   |                                                                      |
// *Send*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]>>>>>>*Rec*
//          < msgName = DC3DbgGetCurrentMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Req                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3DbgGetCurrentMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack                        
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3DbgGetCurrentMsg      < errorCode = ERR_CODE
//          < msgID   = [uint32]                 < uint32_t dbgSettings
//          < msgType = DC3_Done                 
//          < msgProgReq = [0|1]                 
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3DbgPayloadMsg
// END DC3DbgGetCurrentMsg
//------------------------------------------------------------------------------    

//------------------------------------------------------------------------------
// START DC3DbgSetCurrentMsg
// Msg Tag  - 23
// Msg Type - DC3BasicMsg.  Uses DC3BasicMsg structure. No definition needed
// Msg Desc - This message sets the debug bitfield to whatever is sent, 
//            overwriting all debug module fields.  
//
// No message definition needed.  Uses DC3BasicMsg with DC3DbgPayloadMsg
// as a payload for DC3_Ack and DC3_Done.
// Example:
// Client                                                             DC3 Board
//   |                                                                      |
// *Send*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]>>>>>>*Rec*
//          < msgName = DC3DbgSetCurrentMsg      < errorCode = Not used
//          < msgID   = [uint32]                 < uint32_t dbgSettings        
//          < msgType = DC3_Req                  
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[**************DC3BasicMsg***********]\n]<<<<<<<<<<<<<<<<<<<<<<<*Send*
//          < msgName = DC3DbgSetCurrentMsg
//          < msgID   = [uint32]                   
//          < msgType = DC3_Ack                        
//          < msgProgReq = [0|1]
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3NoMsg
// *Rec*  [[************DC3BasicMsg**********][**DC3PayloadMsg**]\n]<<<<<<<<*Send*
//          < msgName = DC3DbgSetCurrentMsg      < errorCode = ERR_CODE
//          < msgID   = [uint32]                 < uint32_t dbgSettings
//          < msgType = DC3_Done                 
//          < msgProgReq = [0|1]                 
//          < msgRoute = [DC3MsgRoute_t]
//          < msgPayload = DC3DbgPayloadMsg
// END DC3DbgSetCurrentMsg
//------------------------------------------------------------------------------   

//------------------------------------------------------------------------------
// START DC3DbgPayloadMsg 
// Msg Tag  - 24
// Msg Type - DC3PayloadMsg.  
// Msg Desc - Sent appended to the various DC3Dbg basic msgs for both DC3_Ack 
//            and DC3_Prog and DC3_Done msgs. Used as a data payload by 
//            DC3DbgEnableMsg and DC3DbgDisableMsg to enable and disable 
//            debugging of various system components on the DC3.  Also used by 
//            DC3DbgGetCurrentMsg and DC3DbgSetCurrentMsg to set and get the 
//            entire debug settings group.
// 
// (See examples in description of DC3Dbg****Msg ).
//
// Non-standard Field Description: (see below)
message DC3DbgPayloadMsg 
{
	required uint32     errorCode = 1; // DC3ErrorCode that specifies status
                                       // of the requested operation.
    required uint32   dbgSettings = 2; // debug module bitfield.                                       
}
// END DC3DbgPayloadMsg.
//------------------------------------------------------------------------------ 


//------------------------------------------------------------------------------
// ----------- END of message definitions used by DC3 API ----------------------
//------------------------------------------------------------------------------
